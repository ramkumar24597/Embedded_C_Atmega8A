
LedBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000054  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000a8  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  000000d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000db  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000080  00000000  00000000  000001d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000bc  00000000  00000000  00000253  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000014b  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000040  00000000  00000000  0000047f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	0d c0       	rjmp	.+26     	; 0x50 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
    }
}

static void ioinit (void)
{
	DDRC = 0b11111110;
  38:	8e ef       	ldi	r24, 0xFE	; 254
  3a:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b00000001;
  3c:	81 e0       	ldi	r24, 0x01	; 1
  3e:	85 bb       	out	0x15, r24	; 21
	PORTC = 0b00000011; 
}

static void led_off(void)
{
	PORTC = 0b00000001;
  40:	91 e0       	ldi	r25, 0x01	; 1
	PORTC = 0b00000001;
}

static void led_on(void)
{
	PORTC = 0b00000011; 
  42:	83 e0       	ldi	r24, 0x03	; 3
{
	ioinit();
    while(1)
    {
        //TODO:: Please write your application code 
		if(bit_is_clear(PINC, 0))
  44:	98 99       	sbic	0x13, 0	; 19
  46:	02 c0       	rjmp	.+4      	; 0x4c <__SREG__+0xd>
	PORTC = 0b00000001;
}

static void led_on(void)
{
	PORTC = 0b00000011; 
  48:	85 bb       	out	0x15, r24	; 21
  4a:	fc cf       	rjmp	.-8      	; 0x44 <__SREG__+0x5>
}

static void led_off(void)
{
	PORTC = 0b00000001;
  4c:	95 bb       	out	0x15, r25	; 21
  4e:	fa cf       	rjmp	.-12     	; 0x44 <__SREG__+0x5>

00000050 <_exit>:
  50:	f8 94       	cli

00000052 <__stop_program>:
  52:	ff cf       	rjmp	.-2      	; 0x52 <__stop_program>
