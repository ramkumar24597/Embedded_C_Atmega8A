
LedBlink_Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000001e0  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000163  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000bb  00000000  00000000  000003a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000110  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000064  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ad  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000012b  00000000  00000000  00000781  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	24 d0       	rcall	.+72     	; 0x8c <main>
  44:	91 c0       	rjmp	.+290    	; 0x168 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_9>:

volatile uint8_t timer0_overflow;
volatile uint8_t timer2_overflow;

ISR(TIMER0_OVF_vect)
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
	// keep a track of number of overflows
	timer0_overflow++;	
  54:	80 91 61 00 	lds	r24, 0x0061
  58:	8f 5f       	subi	r24, 0xFF	; 255
  5a:	80 93 61 00 	sts	0x0061, r24
}
  5e:	8f 91       	pop	r24
  60:	0f 90       	pop	r0
  62:	0f be       	out	0x3f, r0	; 63
  64:	0f 90       	pop	r0
  66:	1f 90       	pop	r1
  68:	18 95       	reti

0000006a <__vector_4>:

ISR(TIMER2_OVF_vect)
{
  6a:	1f 92       	push	r1
  6c:	0f 92       	push	r0
  6e:	0f b6       	in	r0, 0x3f	; 63
  70:	0f 92       	push	r0
  72:	11 24       	eor	r1, r1
  74:	8f 93       	push	r24
	// keep a track of number of overflows
	timer2_overflow++;
  76:	80 91 60 00 	lds	r24, 0x0060
  7a:	8f 5f       	subi	r24, 0xFF	; 255
  7c:	80 93 60 00 	sts	0x0060, r24
}
  80:	8f 91       	pop	r24
  82:	0f 90       	pop	r0
  84:	0f be       	out	0x3f, r0	; 63
  86:	0f 90       	pop	r0
  88:	1f 90       	pop	r1
  8a:	18 95       	reti

0000008c <main>:
    }
}

static void board_io(void)
{
	DDRC = 0b11111000;
  8c:	88 ef       	ldi	r24, 0xF8	; 248
  8e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b00000111;	
  90:	87 e0       	ldi	r24, 0x07	; 7
  92:	85 bb       	out	0x15, r24	; 21
}

static void timer0_init(void)
{
	TCCR0 |= (5 << CS00)|(1 << CS02);
  94:	83 b7       	in	r24, 0x33	; 51
  96:	85 60       	ori	r24, 0x05	; 5
  98:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
  9a:	12 be       	out	0x32, r1	; 50
	TIMSK |= 1 << TOIE0; 
  9c:	89 b7       	in	r24, 0x39	; 57
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	89 bf       	out	0x39, r24	; 57
	timer0_overflow = 0;
  a2:	10 92 61 00 	sts	0x0061, r1
}

static void timer1_init(void)
{
	TCCR1B |= 1 << CS12;
  a6:	8e b5       	in	r24, 0x2e	; 46
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;
  ac:	1d bc       	out	0x2d, r1	; 45
  ae:	1c bc       	out	0x2c, r1	; 44
}

static void timer2_init(void)
{
	TCCR2 |= (1 << CS20)|(1 << CS21)|(1 << CS22);
  b0:	85 b5       	in	r24, 0x25	; 37
  b2:	87 60       	ori	r24, 0x07	; 7
  b4:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0;
  b6:	14 bc       	out	0x24, r1	; 36
	TIMSK |= 1 << TOIE2;
  b8:	89 b7       	in	r24, 0x39	; 57
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	89 bf       	out	0x39, r24	; 57
	timer2_overflow = 0;
  be:	10 92 60 00 	sts	0x0060, r1
{
	board_io();
	timer0_init();
	timer1_init();
	timer2_init();
	sei();
  c2:	78 94       	sei
				}
			}
		}
		else if(bit_is_clear(PINC,2))
		{
			timer2_overflow = 0;
  c4:	54 e0       	ldi	r21, 0x04	; 4
  c6:	40 e0       	ldi	r20, 0x00	; 0
			while(i<4)
			{
				if(timer2_overflow >= 61)
				{
					PORTC ^=  1 << 5;
  c8:	e0 e2       	ldi	r30, 0x20	; 32
		{
			while(i<4)
			{
				if(TCNT1 >= 62500)
				{
					PORTC ^= 1 << 4;
  ca:	70 e1       	ldi	r23, 0x10	; 16
			timer0_overflow = 0;
			while(i<4)
			{
				if(timer0_overflow >= 61)
				{
					PORTC ^=  1 << 3;
  cc:	68 e0       	ldi	r22, 0x08	; 8
		
    while(1)
    {
		int i=0;
        //TODO:: Please write your application code 
		if(bit_is_clear(PINC,0))
  ce:	98 99       	sbic	0x13, 0	; 19
  d0:	17 c0       	rjmp	.+46     	; 0x100 <main+0x74>
		{
			timer0_overflow = 0;
  d2:	10 92 61 00 	sts	0x0061, r1
  d6:	85 2f       	mov	r24, r21
  d8:	94 2f       	mov	r25, r20
  da:	0d c0       	rjmp	.+26     	; 0xf6 <main+0x6a>
			while(i<4)
			{
				if(timer0_overflow >= 61)
  dc:	20 91 61 00 	lds	r18, 0x0061
  e0:	2d 33       	cpi	r18, 0x3D	; 61
  e2:	e0 f3       	brcs	.-8      	; 0xdc <main+0x50>
				{
					PORTC ^=  1 << 3;
  e4:	25 b3       	in	r18, 0x15	; 21
  e6:	26 27       	eor	r18, r22
  e8:	25 bb       	out	0x15, r18	; 21
					TCNT0 = 0;
  ea:	12 be       	out	0x32, r1	; 50
					timer0_overflow = 0;
  ec:	10 92 61 00 	sts	0x0061, r1
  f0:	01 97       	sbiw	r24, 0x01	; 1
		int i=0;
        //TODO:: Please write your application code 
		if(bit_is_clear(PINC,0))
		{
			timer0_overflow = 0;
			while(i<4)
  f2:	00 97       	sbiw	r24, 0x00	; 0
  f4:	61 f3       	breq	.-40     	; 0xce <main+0x42>
			{
				if(timer0_overflow >= 61)
  f6:	20 91 61 00 	lds	r18, 0x0061
  fa:	2d 33       	cpi	r18, 0x3D	; 61
  fc:	78 f3       	brcs	.-34     	; 0xdc <main+0x50>
  fe:	f2 cf       	rjmp	.-28     	; 0xe4 <main+0x58>
					timer0_overflow = 0;
					i++;
				}	
			}
		}
		else if(bit_is_clear(PINC,1))
 100:	99 99       	sbic	0x13, 1	; 19
 102:	18 c0       	rjmp	.+48     	; 0x134 <main+0xa8>
 104:	25 2f       	mov	r18, r21
 106:	34 2f       	mov	r19, r20
 108:	0f c0       	rjmp	.+30     	; 0x128 <main+0x9c>
		{
			while(i<4)
			{
				if(TCNT1 >= 62500)
 10a:	8c b5       	in	r24, 0x2c	; 44
 10c:	9d b5       	in	r25, 0x2d	; 45
 10e:	84 32       	cpi	r24, 0x24	; 36
 110:	94 4f       	sbci	r25, 0xF4	; 244
 112:	d8 f3       	brcs	.-10     	; 0x10a <main+0x7e>
				{
					PORTC ^= 1 << 4;
 114:	85 b3       	in	r24, 0x15	; 21
 116:	87 27       	eor	r24, r23
 118:	85 bb       	out	0x15, r24	; 21
					TCNT1 = 0;
 11a:	1d bc       	out	0x2d, r1	; 45
 11c:	1c bc       	out	0x2c, r1	; 44
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	31 09       	sbc	r19, r1
				}	
			}
		}
		else if(bit_is_clear(PINC,1))
		{
			while(i<4)
 122:	21 15       	cp	r18, r1
 124:	31 05       	cpc	r19, r1
 126:	99 f2       	breq	.-90     	; 0xce <main+0x42>
			{
				if(TCNT1 >= 62500)
 128:	8c b5       	in	r24, 0x2c	; 44
 12a:	9d b5       	in	r25, 0x2d	; 45
 12c:	84 32       	cpi	r24, 0x24	; 36
 12e:	94 4f       	sbci	r25, 0xF4	; 244
 130:	60 f3       	brcs	.-40     	; 0x10a <main+0x7e>
 132:	f0 cf       	rjmp	.-32     	; 0x114 <main+0x88>
					TCNT1 = 0;
					i++;
				}
			}
		}
		else if(bit_is_clear(PINC,2))
 134:	9a 99       	sbic	0x13, 2	; 19
 136:	cb cf       	rjmp	.-106    	; 0xce <main+0x42>
		{
			timer2_overflow = 0;
 138:	10 92 60 00 	sts	0x0060, r1
 13c:	85 2f       	mov	r24, r21
 13e:	94 2f       	mov	r25, r20
 140:	0e c0       	rjmp	.+28     	; 0x15e <main+0xd2>
			while(i<4)
			{
				if(timer2_overflow >= 61)
 142:	20 91 60 00 	lds	r18, 0x0060
 146:	2d 33       	cpi	r18, 0x3D	; 61
 148:	e0 f3       	brcs	.-8      	; 0x142 <main+0xb6>
				{
					PORTC ^=  1 << 5;
 14a:	25 b3       	in	r18, 0x15	; 21
 14c:	2e 27       	eor	r18, r30
 14e:	25 bb       	out	0x15, r18	; 21
					TCNT2 = 0;
 150:	14 bc       	out	0x24, r1	; 36
					timer2_overflow = 0;
 152:	10 92 60 00 	sts	0x0060, r1
 156:	01 97       	sbiw	r24, 0x01	; 1
			}
		}
		else if(bit_is_clear(PINC,2))
		{
			timer2_overflow = 0;
			while(i<4)
 158:	00 97       	sbiw	r24, 0x00	; 0
 15a:	09 f4       	brne	.+2      	; 0x15e <main+0xd2>
 15c:	b8 cf       	rjmp	.-144    	; 0xce <main+0x42>
			{
				if(timer2_overflow >= 61)
 15e:	20 91 60 00 	lds	r18, 0x0060
 162:	2d 33       	cpi	r18, 0x3D	; 61
 164:	70 f3       	brcs	.-36     	; 0x142 <main+0xb6>
 166:	f1 cf       	rjmp	.-30     	; 0x14a <main+0xbe>

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
