
Timer (PWM CTC Mode).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000014c  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000ff  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000009c  00000000  00000000  000002ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000ed  00000000  00000000  00000347  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000068  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000192  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000085  00000000  00000000  0000062e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000006b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	3e c0       	rjmp	.+124    	; 0x84 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	38 d0       	rcall	.+112    	; 0xb4 <main>
  44:	47 c0       	rjmp	.+142    	; 0xd4 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_6>:
	/* Set OC2 as Output */
	DDRB = (1<<PB3);
} 

ISR (TIMER1_COMPA_vect)
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
  54:	9f 93       	push	r25
	T1ACount++;
  56:	80 91 61 00 	lds	r24, 0x0061
  5a:	8f 5f       	subi	r24, 0xFF	; 255
  5c:	80 93 61 00 	sts	0x0061, r24

	if (T1ACount % 2 == 0)
  60:	80 fd       	sbrc	r24, 0
  62:	05 c0       	rjmp	.+10     	; 0x6e <__vector_6+0x26>
	{
		OCR1A = 0x3FFF;
  64:	8f ef       	ldi	r24, 0xFF	; 255
  66:	9f e3       	ldi	r25, 0x3F	; 63
  68:	9b bd       	out	0x2b, r25	; 43
  6a:	8a bd       	out	0x2a, r24	; 42
  6c:	04 c0       	rjmp	.+8      	; 0x76 <__vector_6+0x2e>
	}
	else
	{
		OCR1A = 0xBFFF;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	9f eb       	ldi	r25, 0xBF	; 191
  72:	9b bd       	out	0x2b, r25	; 43
  74:	8a bd       	out	0x2a, r24	; 42
	}
}
  76:	9f 91       	pop	r25
  78:	8f 91       	pop	r24
  7a:	0f 90       	pop	r0
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	0f 90       	pop	r0
  80:	1f 90       	pop	r1
  82:	18 95       	reti

00000084 <__vector_3>:

ISR (TIMER2_COMP_vect)
{
  84:	1f 92       	push	r1
  86:	0f 92       	push	r0
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	0f 92       	push	r0
  8c:	11 24       	eor	r1, r1
  8e:	8f 93       	push	r24
	T2Count++;
  90:	80 91 60 00 	lds	r24, 0x0060
  94:	8f 5f       	subi	r24, 0xFF	; 255
  96:	80 93 60 00 	sts	0x0060, r24

	if (T2Count % 2 == 0)
  9a:	80 fd       	sbrc	r24, 0
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <__vector_3+0x20>
	{
		OCR2 = 191;
  9e:	8f eb       	ldi	r24, 0xBF	; 191
  a0:	83 bd       	out	0x23, r24	; 35
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__vector_3+0x24>
	}
	else
	{
		OCR2 = 64;
  a4:	80 e4       	ldi	r24, 0x40	; 64
  a6:	83 bd       	out	0x23, r24	; 35
	}
}
  a8:	8f 91       	pop	r24
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <main>:

int main(void)
{
	/* Enabling Global Interrupt */
	sei();
  b4:	78 94       	sei
uint8_t T2Count = 0;

static void Timer1AB_ICR_Init(void)
{
	/* Timer1 is configured in CTC mode using ICR1 */
	TCCR1A |= (0<<WGM11)|(0<<WGM10)|(1<<COM1A0)|(1<<COM1B0);
  b6:	8f b5       	in	r24, 0x2f	; 47
  b8:	80 65       	ori	r24, 0x50	; 80
  ba:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM13)|(1<<WGM12)|(1<<CS10);
  bc:	8e b5       	in	r24, 0x2e	; 46
  be:	89 61       	ori	r24, 0x19	; 25
  c0:	8e bd       	out	0x2e, r24	; 46
	
	/* Initialize Timer1 */
	TCNT1 = 0;
  c2:	1d bc       	out	0x2d, r1	; 45
  c4:	1c bc       	out	0x2c, r1	; 44
	
	/* Here, the Compare Reg is OCR */
	ICR1 = 0x7FFF;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	9f e7       	ldi	r25, 0x7F	; 127
  ca:	97 bd       	out	0x27, r25	; 39
  cc:	86 bd       	out	0x26, r24	; 38

	/* Set OC1A & OC1B as Output */				
	DDRB = (1<<PB1)|(1<<PB2);
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	87 bb       	out	0x17, r24	; 23
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <main+0x1e>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
