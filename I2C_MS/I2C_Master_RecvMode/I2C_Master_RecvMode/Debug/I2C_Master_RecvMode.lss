
I2C_Master_RecvMode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000060  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000034b  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001cd  00000000  00000000  0000050f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002a1  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000088  00000000  00000000  00000980  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001f1  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000002d  00000000  00000000  00000bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000040  00000000  00000000  00000c26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	29 d0       	rcall	.+82     	; 0x86 <main>
  34:	53 c0       	rjmp	.+166    	; 0xdc <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <I2C_init>:
#include "I2C_Master_RecvMode.h"

void I2C_init(void)
{
	/* Clearing status register */
	TWSR = 0x00;
  38:	11 b8       	out	0x01, r1	; 1
	
	/* setting up bit rate */
	TWBR = 0x0C;
  3a:	8c e0       	ldi	r24, 0x0C	; 12
  3c:	80 b9       	out	0x00, r24	; 0
  3e:	08 95       	ret

00000040 <I2C_start>:
}

void I2C_start(void)
{
	/* setting start condition */
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
  40:	84 ea       	ldi	r24, 0xA4	; 164
  42:	86 bf       	out	0x36, r24	; 54
	
	/* waiting to finish the start condition */
	while((TWCR & (1<<TWINT)) == 0);
  44:	06 b6       	in	r0, 0x36	; 54
  46:	07 fe       	sbrs	r0, 7
  48:	fd cf       	rjmp	.-6      	; 0x44 <I2C_start+0x4>
	
	/* waiting until req status is obtained */
	while((TWSR & (0xF8)) != 0x08);
  4a:	81 b1       	in	r24, 0x01	; 1
  4c:	88 7f       	andi	r24, 0xF8	; 248
  4e:	88 30       	cpi	r24, 0x08	; 8
  50:	e1 f7       	brne	.-8      	; 0x4a <I2C_start+0xa>
}
  52:	08 95       	ret

00000054 <I2C_write>:

void I2C_write(uint8_t slave_address)
{
	/* storing slave address to the data buffer */
	TWDR = slave_address;
  54:	83 b9       	out	0x03, r24	; 3
	
	/* Enabling transfer */
	TWCR = (1<<TWINT)|(1<<TWEN);
  56:	84 e8       	ldi	r24, 0x84	; 132
  58:	86 bf       	out	0x36, r24	; 54
	
	/* waiting to finish the writing condition */
	while((TWCR & (1<<TWINT)) == 0);
  5a:	06 b6       	in	r0, 0x36	; 54
  5c:	07 fe       	sbrs	r0, 7
  5e:	fd cf       	rjmp	.-6      	; 0x5a <I2C_write+0x6>
	
	/* waiting until req status is obtained */
	while((TWSR & (0xF8)) != 0x40);
  60:	81 b1       	in	r24, 0x01	; 1
  62:	88 7f       	andi	r24, 0xF8	; 248
  64:	80 34       	cpi	r24, 0x40	; 64
  66:	e1 f7       	brne	.-8      	; 0x60 <I2C_write+0xc>
}
  68:	08 95       	ret

0000006a <I2C_Read>:
unsigned char I2C_Read(void)
{
	uint8_t recvdata;
	
	/* Enabling transfer */
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  6a:	84 ec       	ldi	r24, 0xC4	; 196
  6c:	86 bf       	out	0x36, r24	; 54
	
	/* waiting to finish the reading condition */
	while((TWCR & (1<<TWINT)) == 0);
  6e:	06 b6       	in	r0, 0x36	; 54
  70:	07 fe       	sbrs	r0, 7
  72:	fd cf       	rjmp	.-6      	; 0x6e <I2C_Read+0x4>
	
	/* waiting until req status is obtained */
	while((TWSR & (0xF8)) != 0x50);
  74:	81 b1       	in	r24, 0x01	; 1
  76:	88 7f       	andi	r24, 0xF8	; 248
  78:	80 35       	cpi	r24, 0x50	; 80
  7a:	e1 f7       	brne	.-8      	; 0x74 <I2C_Read+0xa>
	
	/* getting data from the data buffer */
	recvdata = TWDR;
  7c:	83 b1       	in	r24, 0x03	; 3
	
	return recvdata;
}
  7e:	08 95       	ret

00000080 <I2C_stop>:

void I2C_stop(void)
{
	/* setting stop condition */
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
  80:	84 e9       	ldi	r24, 0x94	; 148
  82:	86 bf       	out	0x36, r24	; 54
  84:	08 95       	ret

00000086 <main>:
int main(void)
{
	uint8_t data;
	
	/* Initializing I2C Protocol */
	I2C_init();
  86:	d8 df       	rcall	.-80     	; 0x38 <I2C_init>
	while(1)
	{
		//TODO:: Please write your application code
		
		/* Starting the I2C Protocol Sequence */
		I2C_start();
  88:	db df       	rcall	.-74     	; 0x40 <I2C_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	2f ef       	ldi	r18, 0xFF	; 255
  8c:	80 e7       	ldi	r24, 0x70	; 112
  8e:	92 e0       	ldi	r25, 0x02	; 2
  90:	21 50       	subi	r18, 0x01	; 1
  92:	80 40       	sbci	r24, 0x00	; 0
  94:	90 40       	sbci	r25, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0xa>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x14>
  9a:	00 00       	nop
		_delay_ms(100);
		
		/* Writing slave device address */
		I2C_write(0x21);
  9c:	81 e2       	ldi	r24, 0x21	; 33
  9e:	da df       	rcall	.-76     	; 0x54 <I2C_write>
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	80 e7       	ldi	r24, 0x70	; 112
  a4:	92 e0       	ldi	r25, 0x02	; 2
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x20>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x2a>
  b0:	00 00       	nop
		_delay_ms(100);
		
		/* Reading data from the slave device whose address is 0x21 */
		data = I2C_Read();
  b2:	db df       	rcall	.-74     	; 0x6a <I2C_Read>
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	80 e7       	ldi	r24, 0x70	; 112
  b8:	92 e0       	ldi	r25, 0x02	; 2
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x34>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x3e>
  c4:	00 00       	nop
		_delay_ms(100);
		
		/* Stopping the I2C Protocol Sequence */
		I2C_stop();
  c6:	dc df       	rcall	.-72     	; 0x80 <I2C_stop>
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	80 e7       	ldi	r24, 0x70	; 112
  cc:	92 e0       	ldi	r25, 0x02	; 2
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x48>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x52>
  d8:	00 00       	nop
  da:	d6 cf       	rjmp	.-84     	; 0x88 <main+0x2>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
