
Timer (CTC Mode).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000005a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000ae  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  000000de  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000ab  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000071  00000000  00000000  000001a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000bc  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000015f  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000010  00000000  00000000  0000045b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	10 c0       	rjmp	.+32     	; 0x56 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
}

static void Timer1AB_OCR_Init(void)
{
	/* Timer1 is configured in CTC mode using OCR */
	TCCR1A |= (0<<WGM11)|(0<<WGM10)|(1<<COM1A0)|(1<<COM1B0);
  38:	8f b5       	in	r24, 0x2f	; 47
  3a:	80 65       	ori	r24, 0x50	; 80
  3c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (0<<WGM13)|(1<<WGM12)|(1<<CS10);
  3e:	8e b5       	in	r24, 0x2e	; 46
  40:	89 60       	ori	r24, 0x09	; 9
  42:	8e bd       	out	0x2e, r24	; 46
	
	/* Initialize Timer1 */
	TCNT1 = 0;
  44:	1d bc       	out	0x2d, r1	; 45
  46:	1c bc       	out	0x2c, r1	; 44
	
	/* Here, the Compare Reg is OCR */
	OCR1A = 0x7FFF;
  48:	8f ef       	ldi	r24, 0xFF	; 255
  4a:	9f e7       	ldi	r25, 0x7F	; 127
  4c:	9b bd       	out	0x2b, r25	; 43
  4e:	8a bd       	out	0x2a, r24	; 42

	/* Set OC1B as Output */
	DDRB = (1<<PB1)|(1<<PB2);
  50:	86 e0       	ldi	r24, 0x06	; 6
  52:	87 bb       	out	0x17, r24	; 23
  54:	ff cf       	rjmp	.-2      	; 0x54 <__SREG__+0x15>

00000056 <_exit>:
  56:	f8 94       	cli

00000058 <__stop_program>:
  58:	ff cf       	rjmp	.-2      	; 0x58 <__stop_program>
