
SPI_Master_Mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000076  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000ca  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000050  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000238  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001cb  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000022c  00000000  00000000  0000054d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000068  00000000  00000000  0000077c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001c3  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000001f  00000000  00000000  000009a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  000009c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	1e c0       	rjmp	.+60     	; 0x72 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
int main(void)
{
	uint8_t RecvData;
	
	/* Set PORTD as Output */
	DDRD = 0xFF;
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	81 bb       	out	0x11, r24	; 17
	
	/* Initializing SPI Protocol */
	SPI_Init();
  3c:	0e d0       	rcall	.+28     	; 0x5a <SPI_Init>
	
	while(1)
	{
		//TODO:: Please write your application code
		/* Transmit data to the SPI lines */
		SPI_Send(0x60);
  3e:	80 e6       	ldi	r24, 0x60	; 96
  40:	11 d0       	rcall	.+34     	; 0x64 <SPI_Send>
		
		/* Recv data to the SPI lines */
		RecvData = SPI_Recv();
  42:	15 d0       	rcall	.+42     	; 0x6e <SPI_Recv>
		PORTD = RecvData;
  44:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  46:	2f ef       	ldi	r18, 0xFF	; 255
  48:	89 e6       	ldi	r24, 0x69	; 105
  4a:	98 e1       	ldi	r25, 0x18	; 24
  4c:	21 50       	subi	r18, 0x01	; 1
  4e:	80 40       	sbci	r24, 0x00	; 0
  50:	90 40       	sbci	r25, 0x00	; 0
  52:	e1 f7       	brne	.-8      	; 0x4c <__SREG__+0xd>
  54:	00 c0       	rjmp	.+0      	; 0x56 <__SREG__+0x17>
  56:	00 00       	nop
  58:	f2 cf       	rjmp	.-28     	; 0x3e <__SP_H__>

0000005a <SPI_Init>:
#include "SPI_Master_Mode.h"

void SPI_Init(void)
{
	/* Set MOSI, SCK as Output */
	DDRB = (1<<MOSI)|(1<<SS)|(1<<SCK);
  5a:	8c e2       	ldi	r24, 0x2C	; 44
  5c:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Set as Master, Pre-scaler: Fosc/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  5e:	81 e5       	ldi	r24, 0x51	; 81
  60:	8d b9       	out	0x0d, r24	; 13
  62:	08 95       	ret

00000064 <SPI_Send>:
}

void SPI_Send(uint8_t Data)
{
	/* Pull down the SS line to make the slave ready for transmission */
	PORTB = (0<<SS);
  64:	18 ba       	out	0x18, r1	; 24
	
	/* Load the 8-Bit data into the Data register */
	SPDR = Data;
  66:	8f b9       	out	0x0f, r24	; 15
	
	/* wait for transmission to complete */
	while(!(SPSR & (1 << SPIF)));
  68:	77 9b       	sbis	0x0e, 7	; 14
  6a:	fe cf       	rjmp	.-4      	; 0x68 <SPI_Send+0x4>
}
  6c:	08 95       	ret

0000006e <SPI_Recv>:

uint8_t SPI_Recv(void)
{
	/* return 8-bit data of the spi data register */
	return SPDR;
  6e:	8f b1       	in	r24, 0x0f	; 15
}
  70:	08 95       	ret

00000072 <_exit>:
  72:	f8 94       	cli

00000074 <__stop_program>:
  74:	ff cf       	rjmp	.-2      	; 0x74 <__stop_program>
