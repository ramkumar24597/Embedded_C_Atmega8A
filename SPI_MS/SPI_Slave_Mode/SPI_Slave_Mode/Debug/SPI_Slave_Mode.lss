
SPI_Slave_Mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000062  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000b6  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000050  00000000  00000000  000000e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001a3  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000013f  00000000  00000000  000002d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001aa  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000068  00000000  00000000  000005c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000180  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000002c  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	14 c0       	rjmp	.+40     	; 0x5e <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
int main(void)
{
	uint8_t RecvData;
	
	/* Set PORTD as Output */
	DDRD = 0xFF;
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	81 bb       	out	0x11, r24	; 17
	
	/* Initializing SPI Protocol */
	SPI_Init();
  3c:	05 d0       	rcall	.+10     	; 0x48 <SPI_Init>
	
	while(1)
	{
		//TODO:: Please write your application code
		/* Recv data to the SPI lines */
		RecvData = SPI_Recv();
  3e:	0d d0       	rcall	.+26     	; 0x5a <SPI_Recv>
		PORTD = RecvData;
  40:	82 bb       	out	0x12, r24	; 18
		
		RecvData = ~RecvData;
		/* Transmit data to the SPI lines */
		SPI_Send(RecvData);
  42:	80 95       	com	r24
  44:	06 d0       	rcall	.+12     	; 0x52 <SPI_Send>
  46:	fb cf       	rjmp	.-10     	; 0x3e <__SP_H__>

00000048 <SPI_Init>:
#include "SPI_Slave_Mode.h"

void SPI_Init(void)
{
	/* Set MISO as Output */
	DDRB = (1<<MISO);
  48:	80 e1       	ldi	r24, 0x10	; 16
  4a:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Set as Slave*/
	SPCR = (1<<SPE);
  4c:	80 e4       	ldi	r24, 0x40	; 64
  4e:	8d b9       	out	0x0d, r24	; 13
  50:	08 95       	ret

00000052 <SPI_Send>:
}

void SPI_Send(uint8_t ReturnData)
{
	/* Load the 8-Bit data into the Data register */
	SPDR = ReturnData;
  52:	8f b9       	out	0x0f, r24	; 15
	
	/* wait for transmission to complete */
	while(!(SPSR & (1 << SPIF)));
  54:	77 9b       	sbis	0x0e, 7	; 14
  56:	fe cf       	rjmp	.-4      	; 0x54 <SPI_Send+0x2>
}
  58:	08 95       	ret

0000005a <SPI_Recv>:

uint8_t SPI_Recv(void)
{
	/* return 8-bit data of the spi data register */
	return SPDR;
  5a:	8f b1       	in	r24, 0x0f	; 15
}
  5c:	08 95       	ret

0000005e <_exit>:
  5e:	f8 94       	cli

00000060 <__stop_program>:
  60:	ff cf       	rjmp	.-2      	; 0x60 <__stop_program>
