
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000080  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000681  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000003b8  00000000  00000000  00000933  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000003b9  00000000  00000000  00000ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000d0  00000000  00000000  000010a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000212  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001e8  00000000  00000000  00001386  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000050  00000000  00000000  0000156e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	65 d0       	rcall	.+202    	; 0xfe <main>
  34:	ba c0       	rjmp	.+372    	; 0x1aa <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <ADC_init>:
#include "ADC.h"

void ADC_init(void)
{
	/* Selecting Reference Voltage */
	ADMUX = (0<<REFS0);
  38:	17 b8       	out	0x07, r1	; 7
	
	/* Enabling ADC & configuring ADC pre-scalar */
	ADCSRA = (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  3a:	87 e8       	ldi	r24, 0x87	; 135
  3c:	86 b9       	out	0x06, r24	; 6
  3e:	08 95       	ret

00000040 <ADC_read>:
{
	/* setting bit 7-3 to 0 */
	channel &= 0b00000111;
	
	/* selecting ADC channel */
	ADMUX = (ADMUX & 0xF8)|channel;
  40:	97 b1       	in	r25, 0x07	; 7
}

uint16_t ADC_read(uint8_t channel)
{
	/* setting bit 7-3 to 0 */
	channel &= 0b00000111;
  42:	87 70       	andi	r24, 0x07	; 7
	
	/* selecting ADC channel */
	ADMUX = (ADMUX & 0xF8)|channel;
  44:	98 7f       	andi	r25, 0xF8	; 248
  46:	98 2b       	or	r25, r24
  48:	97 b9       	out	0x07, r25	; 7
	
	/* ADC starting conversion */
	ADCSRA |= (1<<ADSC);
  4a:	36 9a       	sbi	0x06, 6	; 6
	
	/* wait until conversion full */
	while(ADCSRA & (1<<ADSC));
  4c:	36 99       	sbic	0x06, 6	; 6
  4e:	fe cf       	rjmp	.-4      	; 0x4c <ADC_read+0xc>

	return ADC;
  50:	84 b1       	in	r24, 0x04	; 4
  52:	95 b1       	in	r25, 0x05	; 5
  54:	08 95       	ret

00000056 <LCD_cmd>:
}

void LCD_cmd(uint8_t command)
{
	/* set LCD into the command reg mode & disabling the LCD enable pin*/	
	PORTB = (0<<PORTB0)|(1<<PORTB2);
  56:	94 e0       	ldi	r25, 0x04	; 4
  58:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5a:	ef e0       	ldi	r30, 0x0F	; 15
  5c:	f7 e2       	ldi	r31, 0x27	; 39
  5e:	31 97       	sbiw	r30, 0x01	; 1
  60:	f1 f7       	brne	.-4      	; 0x5e <LCD_cmd+0x8>
  62:	00 c0       	rjmp	.+0      	; 0x64 <LCD_cmd+0xe>
  64:	00 00       	nop
	_delay_ms(5);
	
	/* Loading command into the PORTD */
	PORTD = command;
  66:	82 bb       	out	0x12, r24	; 18
	
	/* Keeping LCD into the command reg mode & latching command to LCD using enable */
	PORTB = (0<<PORTB0)|(0<<PORTB2);
  68:	18 ba       	out	0x18, r1	; 24
  6a:	8f e0       	ldi	r24, 0x0F	; 15
  6c:	97 e2       	ldi	r25, 0x27	; 39
  6e:	01 97       	sbiw	r24, 0x01	; 1
  70:	f1 f7       	brne	.-4      	; 0x6e <LCD_cmd+0x18>
  72:	00 c0       	rjmp	.+0      	; 0x74 <LCD_cmd+0x1e>
  74:	00 00       	nop
  76:	08 95       	ret

00000078 <LCD_init>:
#include "LCD.h"

void LCD_init(void)
{
	/* LCD control bus */
	DDRB |= 0xFF;
  78:	87 b3       	in	r24, 0x17	; 23
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	87 bb       	out	0x17, r24	; 23
	
	/* LCD data bus */
	DDRD |= 0xFF;
  7e:	91 b3       	in	r25, 0x11	; 17
  80:	81 bb       	out	0x11, r24	; 17
	
	/* Initialize the bus to zero */
	PORTB = 0x00;
  82:	18 ba       	out	0x18, r1	; 24
	PORTD = 0x00;
  84:	12 ba       	out	0x12, r1	; 18
	
	/* 8bit LCD control */
	LCD_cmd(0x38);
  86:	88 e3       	ldi	r24, 0x38	; 56
  88:	e6 df       	rcall	.-52     	; 0x56 <LCD_cmd>
	
	/* Display ON and cursor ON (blinking off) */
	LCD_cmd(0x0E);
  8a:	8e e0       	ldi	r24, 0x0E	; 14
  8c:	e4 df       	rcall	.-56     	; 0x56 <LCD_cmd>
	
	/* clear last print */
	LCD_cmd(0x01);
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	e2 df       	rcall	.-60     	; 0x56 <LCD_cmd>
  92:	8f e0       	ldi	r24, 0x0F	; 15
  94:	97 e2       	ldi	r25, 0x27	; 39
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <LCD_init+0x1e>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <LCD_init+0x24>
  9c:	00 00       	nop
  9e:	08 95       	ret

000000a0 <LCD_data>:
}

void LCD_data(uint8_t data)
{
	/* set LCD into the data reg mode & disabling the LCD enable pin*/
	PORTB = (1<<PORTB0)|(1<<PORTB2);
  a0:	95 e0       	ldi	r25, 0x05	; 5
  a2:	98 bb       	out	0x18, r25	; 24
  a4:	ef e0       	ldi	r30, 0x0F	; 15
  a6:	f7 e2       	ldi	r31, 0x27	; 39
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <LCD_data+0x8>
  ac:	00 c0       	rjmp	.+0      	; 0xae <LCD_data+0xe>
  ae:	00 00       	nop
	_delay_ms(5);
	
	/* Loading data into the PORTD */
	PORTD = data;
  b0:	82 bb       	out	0x12, r24	; 18

	/* Keeping LCD into the data reg mode & latching data to LCD using enable */
	PORTB = (1<<PORTB0)|(0<<PORTB2);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	88 bb       	out	0x18, r24	; 24
  b6:	8f e0       	ldi	r24, 0x0F	; 15
  b8:	97 e2       	ldi	r25, 0x27	; 39
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <LCD_data+0x1a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <LCD_data+0x20>
  c0:	00 00       	nop
  c2:	08 95       	ret

000000c4 <LCD_print>:
	_delay_ms(5);
}

void LCD_print(int line_no, char *info)
{
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	8c 01       	movw	r16, r24
  ce:	eb 01       	movw	r28, r22
	int i;
	
	/* clear last print */
	LCD_cmd(0x01);
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	c1 df       	rcall	.-126    	; 0x56 <LCD_cmd>
	
	if(line_no == 1)
  d4:	01 30       	cpi	r16, 0x01	; 1
  d6:	11 05       	cpc	r17, r1
  d8:	19 f4       	brne	.+6      	; 0xe0 <LCD_print+0x1c>
	{
		/* cursor to first row of LCD */
		LCD_cmd(0x80);
  da:	80 e8       	ldi	r24, 0x80	; 128
  dc:	bc df       	rcall	.-136    	; 0x56 <LCD_cmd>
  de:	02 c0       	rjmp	.+4      	; 0xe4 <LCD_print+0x20>
	}
	else
	{
		/* cursor to second row of LCD */
		LCD_cmd(0xC0);	
  e0:	80 ec       	ldi	r24, 0xC0	; 192
  e2:	b9 df       	rcall	.-142    	; 0x56 <LCD_cmd>
	}

	for(i=0;info[i] != 0;i++)
  e4:	88 81       	ld	r24, Y
  e6:	88 23       	and	r24, r24
  e8:	29 f0       	breq	.+10     	; 0xf4 <LCD_print+0x30>
  ea:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_data(info[i]);
  ec:	d9 df       	rcall	.-78     	; 0xa0 <LCD_data>
	{
		/* cursor to second row of LCD */
		LCD_cmd(0xC0);	
	}

	for(i=0;info[i] != 0;i++)
  ee:	89 91       	ld	r24, Y+
  f0:	81 11       	cpse	r24, r1
  f2:	fc cf       	rjmp	.-8      	; 0xec <LCD_print+0x28>
	{
		LCD_data(info[i]);
	}	
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	1f 91       	pop	r17
  fa:	0f 91       	pop	r16
  fc:	08 95       	ret

000000fe <main>:
#include <util/delay.h>
#include "ADC.h"
#include "LCD.h"

int main(void)
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	2a 97       	sbiw	r28, 0x0a	; 10
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	0f be       	out	0x3f, r0	; 63
 110:	cd bf       	out	0x3d, r28	; 61
	uint16_t ADC_Result;
	char data[10];
	
	/* Initializing ADC */
	ADC_init();
 112:	92 df       	rcall	.-220    	; 0x38 <ADC_init>
	
	/* Initializing LCD */
	LCD_init();
 114:	b1 df       	rcall	.-158    	; 0x78 <LCD_init>
	while(1)
	{
		//TODO:: Please write your application code
		
		/* Read ADC value respective channel */
		ADC_Result = ADC_read(0);
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	93 df       	rcall	.-218    	; 0x40 <ADC_read>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 11a:	4a e0       	ldi	r20, 0x0A	; 10
 11c:	be 01       	movw	r22, r28
 11e:	6f 5f       	subi	r22, 0xFF	; 255
 120:	7f 4f       	sbci	r23, 0xFF	; 255
 122:	10 d0       	rcall	.+32     	; 0x144 <__itoa_ncheck>
		
		/* integer to string conversion */
		itoa(ADC_Result, data, 10);
		
		/* printing in LCD */
		LCD_print(1, data);
 124:	be 01       	movw	r22, r28
 126:	6f 5f       	subi	r22, 0xFF	; 255
 128:	7f 4f       	sbci	r23, 0xFF	; 255
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	ca df       	rcall	.-108    	; 0xc4 <LCD_print>
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	89 e6       	ldi	r24, 0x69	; 105
 134:	98 e1       	ldi	r25, 0x18	; 24
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x38>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x42>
 140:	00 00       	nop
 142:	e9 cf       	rjmp	.-46     	; 0x116 <main+0x18>

00000144 <__itoa_ncheck>:
 144:	bb 27       	eor	r27, r27
 146:	4a 30       	cpi	r20, 0x0A	; 10
 148:	31 f4       	brne	.+12     	; 0x156 <__itoa_ncheck+0x12>
 14a:	99 23       	and	r25, r25
 14c:	22 f4       	brpl	.+8      	; 0x156 <__itoa_ncheck+0x12>
 14e:	bd e2       	ldi	r27, 0x2D	; 45
 150:	90 95       	com	r25
 152:	81 95       	neg	r24
 154:	9f 4f       	sbci	r25, 0xFF	; 255
 156:	01 c0       	rjmp	.+2      	; 0x15a <__utoa_common>

00000158 <__utoa_ncheck>:
 158:	bb 27       	eor	r27, r27

0000015a <__utoa_common>:
 15a:	fb 01       	movw	r30, r22
 15c:	55 27       	eor	r21, r21
 15e:	aa 27       	eor	r26, r26
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	aa 1f       	adc	r26, r26
 166:	a4 17       	cp	r26, r20
 168:	10 f0       	brcs	.+4      	; 0x16e <__utoa_common+0x14>
 16a:	a4 1b       	sub	r26, r20
 16c:	83 95       	inc	r24
 16e:	50 51       	subi	r21, 0x10	; 16
 170:	b9 f7       	brne	.-18     	; 0x160 <__utoa_common+0x6>
 172:	a0 5d       	subi	r26, 0xD0	; 208
 174:	aa 33       	cpi	r26, 0x3A	; 58
 176:	08 f0       	brcs	.+2      	; 0x17a <__utoa_common+0x20>
 178:	a9 5d       	subi	r26, 0xD9	; 217
 17a:	a1 93       	st	Z+, r26
 17c:	00 97       	sbiw	r24, 0x00	; 0
 17e:	79 f7       	brne	.-34     	; 0x15e <__utoa_common+0x4>
 180:	b1 11       	cpse	r27, r1
 182:	b1 93       	st	Z+, r27
 184:	11 92       	st	Z+, r1
 186:	cb 01       	movw	r24, r22
 188:	00 c0       	rjmp	.+0      	; 0x18a <strrev>

0000018a <strrev>:
 18a:	dc 01       	movw	r26, r24
 18c:	fc 01       	movw	r30, r24
 18e:	67 2f       	mov	r22, r23
 190:	71 91       	ld	r23, Z+
 192:	77 23       	and	r23, r23
 194:	e1 f7       	brne	.-8      	; 0x18e <strrev+0x4>
 196:	32 97       	sbiw	r30, 0x02	; 2
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <strrev+0x18>
 19a:	7c 91       	ld	r23, X
 19c:	6d 93       	st	X+, r22
 19e:	70 83       	st	Z, r23
 1a0:	62 91       	ld	r22, -Z
 1a2:	ae 17       	cp	r26, r30
 1a4:	bf 07       	cpc	r27, r31
 1a6:	c8 f3       	brcs	.-14     	; 0x19a <strrev+0x10>
 1a8:	08 95       	ret

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
