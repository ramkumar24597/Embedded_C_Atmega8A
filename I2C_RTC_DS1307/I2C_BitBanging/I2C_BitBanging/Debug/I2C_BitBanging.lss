
I2C_BitBanging.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00000d00  00000d94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080009c  0080009c  00000dd0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001019  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b3  00000000  00000000  00001f25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000060a  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e4  00000000  00000000  00002ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c2  00000000  00000000  00002cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000072c  00000000  00000000  0000308a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000037b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e0       	ldi	r30, 0x00	; 0
  3a:	fd e0       	ldi	r31, 0x0D	; 13
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 39       	cpi	r26, 0x9C	; 156
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ac e9       	ldi	r26, 0x9C	; 156
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ae 39       	cpi	r26, 0x9E	; 158
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	b6 d2       	rcall	.+1388   	; 0x5c6 <main>
  5a:	50 c6       	rjmp	.+3232   	; 0xcfc <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <Data2Bcd>:
	
	return GetDateTime;
}

void Data2Bcd(DataDateTime *pInputData, BcdDateTime *pOutputData)
{
  5e:	ef 92       	push	r14
  60:	ff 92       	push	r15
  62:	0f 93       	push	r16
  64:	1f 93       	push	r17
  66:	cf 93       	push	r28
  68:	df 93       	push	r29
  6a:	8c 01       	movw	r16, r24
  6c:	eb 01       	movw	r28, r22
	char *ptoken;
	
	/* Parsing Input Time Data */
	ptoken = strtok((char*)pInputData->Time, ":");
  6e:	60 e6       	ldi	r22, 0x60	; 96
  70:	70 e0       	ldi	r23, 0x00	; 0
  72:	0f 96       	adiw	r24, 0x0f	; 15
  74:	48 d3       	rcall	.+1680   	; 0x706 <strtok>
	pOutputData->Hrs = DecimalToBCD(atoi(ptoken));
  76:	2a d3       	rcall	.+1620   	; 0x6cc <atoi>
	sprintf((char*)pOutputData->Time, "%02d:%02d:%02d%s", BCDToDecimal(pInputData->Hrs), BCDToDecimal(pInputData->Mins), BCDToDecimal(pInputData->Secs), TimeFormat);
}

static int DecimalToBCD(int Decimal)
{
	return (((Decimal/10) << 4) | (Decimal % 10));
  78:	0f 2e       	mov	r0, r31
  7a:	fa e0       	ldi	r31, 0x0A	; 10
  7c:	ef 2e       	mov	r14, r31
  7e:	f1 2c       	mov	r15, r1
  80:	f0 2d       	mov	r31, r0
  82:	b7 01       	movw	r22, r14
  84:	fc d2       	rcall	.+1528   	; 0x67e <__divmodhi4>
  86:	62 95       	swap	r22
  88:	72 95       	swap	r23
  8a:	70 7f       	andi	r23, 0xF0	; 240
  8c:	76 27       	eor	r23, r22
  8e:	60 7f       	andi	r22, 0xF0	; 240
  90:	76 27       	eor	r23, r22
  92:	68 2b       	or	r22, r24
  94:	79 2b       	or	r23, r25
{
	char *ptoken;
	
	/* Parsing Input Time Data */
	ptoken = strtok((char*)pInputData->Time, ":");
	pOutputData->Hrs = DecimalToBCD(atoi(ptoken));
  96:	6a 83       	std	Y+2, r22	; 0x02
	ptoken = strtok(NULL, ":");
  98:	60 e6       	ldi	r22, 0x60	; 96
  9a:	70 e0       	ldi	r23, 0x00	; 0
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	32 d3       	rcall	.+1636   	; 0x706 <strtok>
	pOutputData->Mins = DecimalToBCD(atoi(ptoken));
  a2:	14 d3       	rcall	.+1576   	; 0x6cc <atoi>
	sprintf((char*)pOutputData->Time, "%02d:%02d:%02d%s", BCDToDecimal(pInputData->Hrs), BCDToDecimal(pInputData->Mins), BCDToDecimal(pInputData->Secs), TimeFormat);
}

static int DecimalToBCD(int Decimal)
{
	return (((Decimal/10) << 4) | (Decimal % 10));
  a4:	b7 01       	movw	r22, r14
  a6:	eb d2       	rcall	.+1494   	; 0x67e <__divmodhi4>
  a8:	62 95       	swap	r22
  aa:	72 95       	swap	r23
  ac:	70 7f       	andi	r23, 0xF0	; 240
  ae:	76 27       	eor	r23, r22
  b0:	60 7f       	andi	r22, 0xF0	; 240
  b2:	76 27       	eor	r23, r22
  b4:	68 2b       	or	r22, r24
  b6:	79 2b       	or	r23, r25
	
	/* Parsing Input Time Data */
	ptoken = strtok((char*)pInputData->Time, ":");
	pOutputData->Hrs = DecimalToBCD(atoi(ptoken));
	ptoken = strtok(NULL, ":");
	pOutputData->Mins = DecimalToBCD(atoi(ptoken));
  b8:	69 83       	std	Y+1, r22	; 0x01
	ptoken = strtok(NULL, " ");
  ba:	62 e6       	ldi	r22, 0x62	; 98
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	21 d3       	rcall	.+1602   	; 0x706 <strtok>
	pOutputData->Secs = DecimalToBCD(atoi(ptoken));
  c4:	03 d3       	rcall	.+1542   	; 0x6cc <atoi>
	sprintf((char*)pOutputData->Time, "%02d:%02d:%02d%s", BCDToDecimal(pInputData->Hrs), BCDToDecimal(pInputData->Mins), BCDToDecimal(pInputData->Secs), TimeFormat);
}

static int DecimalToBCD(int Decimal)
{
	return (((Decimal/10) << 4) | (Decimal % 10));
  c6:	b7 01       	movw	r22, r14
  c8:	da d2       	rcall	.+1460   	; 0x67e <__divmodhi4>
  ca:	62 95       	swap	r22
  cc:	72 95       	swap	r23
  ce:	70 7f       	andi	r23, 0xF0	; 240
  d0:	76 27       	eor	r23, r22
  d2:	60 7f       	andi	r22, 0xF0	; 240
  d4:	76 27       	eor	r23, r22
  d6:	68 2b       	or	r22, r24
  d8:	79 2b       	or	r23, r25
	ptoken = strtok((char*)pInputData->Time, ":");
	pOutputData->Hrs = DecimalToBCD(atoi(ptoken));
	ptoken = strtok(NULL, ":");
	pOutputData->Mins = DecimalToBCD(atoi(ptoken));
	ptoken = strtok(NULL, " ");
	pOutputData->Secs = DecimalToBCD(atoi(ptoken));
  da:	68 83       	st	Y, r22

	/* Switching between 12 or 24 Hrs Format based on input */
	ptoken = strtok(NULL, " ");
  dc:	62 e6       	ldi	r22, 0x62	; 98
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	10 d3       	rcall	.+1568   	; 0x706 <strtok>
	if(ptoken != NULL)
  e6:	00 97       	sbiw	r24, 0x00	; 0
  e8:	61 f0       	breq	.+24     	; 0x102 <Data2Bcd+0xa4>
	{
		if(!(strcmp(ptoken, "PM")))
  ea:	6f e8       	ldi	r22, 0x8F	; 143
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	0f d3       	rcall	.+1566   	; 0x70e <strcmp>
  f0:	89 2b       	or	r24, r25
  f2:	21 f4       	brne	.+8      	; 0xfc <Data2Bcd+0x9e>
		{
			pOutputData->Hrs |= 0x60;
  f4:	8a 81       	ldd	r24, Y+2	; 0x02
  f6:	80 66       	ori	r24, 0x60	; 96
  f8:	8a 83       	std	Y+2, r24	; 0x02
  fa:	03 c0       	rjmp	.+6      	; 0x102 <Data2Bcd+0xa4>
		}
		else
		{
			pOutputData->Hrs |= 0x40;
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	8a 83       	std	Y+2, r24	; 0x02
		}
	}
	
	/* Setting Day No */
	pOutputData->Day = pInputData->eDay;
 102:	f8 01       	movw	r30, r16
 104:	86 8d       	ldd	r24, Z+30	; 0x1e
 106:	8b 83       	std	Y+3, r24	; 0x03

	/* Parsing Input Date Data */
	ptoken = strtok((char*)pInputData->Date, "-");
 108:	64 e6       	ldi	r22, 0x64	; 100
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	c8 01       	movw	r24, r16
 10e:	fb d2       	rcall	.+1526   	; 0x706 <strtok>
	pOutputData->Date = DecimalToBCD(atoi(ptoken));
 110:	dd d2       	rcall	.+1466   	; 0x6cc <atoi>
	sprintf((char*)pOutputData->Time, "%02d:%02d:%02d%s", BCDToDecimal(pInputData->Hrs), BCDToDecimal(pInputData->Mins), BCDToDecimal(pInputData->Secs), TimeFormat);
}

static int DecimalToBCD(int Decimal)
{
	return (((Decimal/10) << 4) | (Decimal % 10));
 112:	0a e0       	ldi	r16, 0x0A	; 10
 114:	10 e0       	ldi	r17, 0x00	; 0
 116:	b8 01       	movw	r22, r16
 118:	b2 d2       	rcall	.+1380   	; 0x67e <__divmodhi4>
 11a:	62 95       	swap	r22
 11c:	72 95       	swap	r23
 11e:	70 7f       	andi	r23, 0xF0	; 240
 120:	76 27       	eor	r23, r22
 122:	60 7f       	andi	r22, 0xF0	; 240
 124:	76 27       	eor	r23, r22
 126:	68 2b       	or	r22, r24
 128:	79 2b       	or	r23, r25
	/* Setting Day No */
	pOutputData->Day = pInputData->eDay;

	/* Parsing Input Date Data */
	ptoken = strtok((char*)pInputData->Date, "-");
	pOutputData->Date = DecimalToBCD(atoi(ptoken));
 12a:	6c 83       	std	Y+4, r22	; 0x04
	ptoken = strtok(NULL, "-");
 12c:	64 e6       	ldi	r22, 0x64	; 100
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	e8 d2       	rcall	.+1488   	; 0x706 <strtok>
	pOutputData->Months = DecimalToBCD(atoi(ptoken));
 136:	ca d2       	rcall	.+1428   	; 0x6cc <atoi>
	sprintf((char*)pOutputData->Time, "%02d:%02d:%02d%s", BCDToDecimal(pInputData->Hrs), BCDToDecimal(pInputData->Mins), BCDToDecimal(pInputData->Secs), TimeFormat);
}

static int DecimalToBCD(int Decimal)
{
	return (((Decimal/10) << 4) | (Decimal % 10));
 138:	b8 01       	movw	r22, r16
 13a:	a1 d2       	rcall	.+1346   	; 0x67e <__divmodhi4>
 13c:	62 95       	swap	r22
 13e:	72 95       	swap	r23
 140:	70 7f       	andi	r23, 0xF0	; 240
 142:	76 27       	eor	r23, r22
 144:	60 7f       	andi	r22, 0xF0	; 240
 146:	76 27       	eor	r23, r22
 148:	68 2b       	or	r22, r24
 14a:	79 2b       	or	r23, r25

	/* Parsing Input Date Data */
	ptoken = strtok((char*)pInputData->Date, "-");
	pOutputData->Date = DecimalToBCD(atoi(ptoken));
	ptoken = strtok(NULL, "-");
	pOutputData->Months = DecimalToBCD(atoi(ptoken));
 14c:	6d 83       	std	Y+5, r22	; 0x05
	ptoken = strtok(NULL, " ");
 14e:	62 e6       	ldi	r22, 0x62	; 98
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	d7 d2       	rcall	.+1454   	; 0x706 <strtok>
	pOutputData->Year = DecimalToBCD(atoi(ptoken));	
 158:	b9 d2       	rcall	.+1394   	; 0x6cc <atoi>
	sprintf((char*)pOutputData->Time, "%02d:%02d:%02d%s", BCDToDecimal(pInputData->Hrs), BCDToDecimal(pInputData->Mins), BCDToDecimal(pInputData->Secs), TimeFormat);
}

static int DecimalToBCD(int Decimal)
{
	return (((Decimal/10) << 4) | (Decimal % 10));
 15a:	b8 01       	movw	r22, r16
 15c:	90 d2       	rcall	.+1312   	; 0x67e <__divmodhi4>
 15e:	62 95       	swap	r22
 160:	72 95       	swap	r23
 162:	70 7f       	andi	r23, 0xF0	; 240
 164:	76 27       	eor	r23, r22
 166:	60 7f       	andi	r22, 0xF0	; 240
 168:	76 27       	eor	r23, r22
 16a:	68 2b       	or	r22, r24
 16c:	79 2b       	or	r23, r25
	ptoken = strtok((char*)pInputData->Date, "-");
	pOutputData->Date = DecimalToBCD(atoi(ptoken));
	ptoken = strtok(NULL, "-");
	pOutputData->Months = DecimalToBCD(atoi(ptoken));
	ptoken = strtok(NULL, " ");
	pOutputData->Year = DecimalToBCD(atoi(ptoken));	
 16e:	6e 83       	std	Y+6, r22	; 0x06
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	08 95       	ret

0000017e <DS1307_Write>:

static int DecimalToBCD(int Decimal);
static int BCDToDecimal(int BCD);

void DS1307_Write(DataDateTime SetDateTime)
{	
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
 186:	28 97       	sbiw	r28, 0x08	; 8
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	f8 94       	cli
 18c:	de bf       	out	0x3e, r29	; 62
 18e:	0f be       	out	0x3f, r0	; 63
 190:	cd bf       	out	0x3d, r28	; 61
	BcdDateTime SetInputBcdFormat;
	
	/* Convert DataDateTime data into BCDFormat data */
	Data2Bcd(&SetDateTime, &SetInputBcdFormat);
 192:	be 01       	movw	r22, r28
 194:	6f 5f       	subi	r22, 0xFF	; 255
 196:	7f 4f       	sbci	r23, 0xFF	; 255
 198:	ce 01       	movw	r24, r28
 19a:	0d 96       	adiw	r24, 0x0d	; 13
 19c:	60 df       	rcall	.-320    	; 0x5e <Data2Bcd>
	
	/* Start I2C Transfer */
	I2C_start();
 19e:	7e d1       	rcall	.+764    	; 0x49c <I2C_start>
	
	/* Select Slave device to Write of Address D0H */
	I2C_write(WriteAddress, SLAVE_ADDRESS);
 1a0:	60 ed       	ldi	r22, 0xD0	; 208
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	81 d1       	rcall	.+770    	; 0x4a8 <I2C_write>
	
	/* Set Reg Address to 00H */
	I2C_write(WriteData, SLAVE_REG_ADDRESS);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	7e d1       	rcall	.+764    	; 0x4a8 <I2C_write>
	
	/* Setting up Seconds */
	I2C_write(WriteData, SetInputBcdFormat.Secs);
 1ac:	69 81       	ldd	r22, Y+1	; 0x01
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	7b d1       	rcall	.+758    	; 0x4a8 <I2C_write>

	/* Setting up Minutes */
	I2C_write(WriteData, SetInputBcdFormat.Mins);
 1b2:	6a 81       	ldd	r22, Y+2	; 0x02
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	78 d1       	rcall	.+752    	; 0x4a8 <I2C_write>
	
	/* Setting up Hours */
	I2C_write(WriteData, SetInputBcdFormat.Hrs);
 1b8:	6b 81       	ldd	r22, Y+3	; 0x03
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	75 d1       	rcall	.+746    	; 0x4a8 <I2C_write>
	
	/* Setting up Day */
	I2C_write(WriteData, SetInputBcdFormat.Day);
 1be:	6c 81       	ldd	r22, Y+4	; 0x04
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	72 d1       	rcall	.+740    	; 0x4a8 <I2C_write>
	
	/* Setting up Date */
	I2C_write(WriteData, SetInputBcdFormat.Date);
 1c4:	6d 81       	ldd	r22, Y+5	; 0x05
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	6f d1       	rcall	.+734    	; 0x4a8 <I2C_write>
	
	/* Setting up Months */
	I2C_write(WriteData, SetInputBcdFormat.Months);
 1ca:	6e 81       	ldd	r22, Y+6	; 0x06
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	6c d1       	rcall	.+728    	; 0x4a8 <I2C_write>
	
	/* Setting up Year */
	I2C_write(WriteData, SetInputBcdFormat.Year);
 1d0:	6f 81       	ldd	r22, Y+7	; 0x07
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	69 d1       	rcall	.+722    	; 0x4a8 <I2C_write>
	
	/* Stop I2C Transfer */
	I2C_stop();
 1d6:	82 d1       	rcall	.+772    	; 0x4dc <I2C_stop>
}
 1d8:	28 96       	adiw	r28, 0x08	; 8
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	f8 94       	cli
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	cd bf       	out	0x3d, r28	; 61
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <Bcd2Data>:
	ptoken = strtok(NULL, " ");
	pOutputData->Year = DecimalToBCD(atoi(ptoken));	
}

void Bcd2Data(BcdDateTime *pInputData, DataDateTime *pOutputData)
{
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
 1fa:	2a 97       	sbiw	r28, 0x0a	; 10
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	f8 94       	cli
 200:	de bf       	out	0x3e, r29	; 62
 202:	0f be       	out	0x3f, r0	; 63
 204:	cd bf       	out	0x3d, r28	; 61
 206:	8c 01       	movw	r16, r24
 208:	7b 01       	movw	r14, r22
	uint8_t TimeFormat[10]={0};
 20a:	fe 01       	movw	r30, r28
 20c:	31 96       	adiw	r30, 0x01	; 1
 20e:	8a e0       	ldi	r24, 0x0A	; 10
 210:	df 01       	movw	r26, r30
 212:	1d 92       	st	X+, r1
 214:	8a 95       	dec	r24
 216:	e9 f7       	brne	.-6      	; 0x212 <Bcd2Data+0x28>

	/* Storing Day No */
	pOutputData->eDay = pInputData->Day;
 218:	f8 01       	movw	r30, r16
 21a:	83 81       	ldd	r24, Z+3	; 0x03
 21c:	db 01       	movw	r26, r22
 21e:	5e 96       	adiw	r26, 0x1e	; 30
 220:	8c 93       	st	X, r24
		
	/* Framing Date String */
	sprintf((char*)pOutputData->Date, "%02d-%02d-%04d", BCDToDecimal(pInputData->Date), BCDToDecimal(pInputData->Months), (2000+BCDToDecimal(pInputData->Year)));
 222:	66 81       	ldd	r22, Z+6	; 0x06
 224:	55 81       	ldd	r21, Z+5	; 0x05
 226:	44 81       	ldd	r20, Z+4	; 0x04
 228:	26 2f       	mov	r18, r22
 22a:	30 e0       	ldi	r19, 0x00	; 0
	return (((Decimal/10) << 4) | (Decimal % 10));
}

static int BCDToDecimal(int BCD)
{
	return (((BCD>>4)*10) + (BCD & 0xF));
 22c:	35 95       	asr	r19
 22e:	27 95       	ror	r18
 230:	35 95       	asr	r19
 232:	27 95       	ror	r18
 234:	35 95       	asr	r19
 236:	27 95       	ror	r18
 238:	35 95       	asr	r19
 23a:	27 95       	ror	r18
 23c:	c9 01       	movw	r24, r18
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	22 0f       	add	r18, r18
 244:	33 1f       	adc	r19, r19
 246:	22 0f       	add	r18, r18
 248:	33 1f       	adc	r19, r19
 24a:	22 0f       	add	r18, r18
 24c:	33 1f       	adc	r19, r19
 24e:	82 0f       	add	r24, r18
 250:	93 1f       	adc	r25, r19
 252:	6f 70       	andi	r22, 0x0F	; 15
 254:	86 0f       	add	r24, r22
 256:	91 1d       	adc	r25, r1

	/* Storing Day No */
	pOutputData->eDay = pInputData->Day;
		
	/* Framing Date String */
	sprintf((char*)pOutputData->Date, "%02d-%02d-%04d", BCDToDecimal(pInputData->Date), BCDToDecimal(pInputData->Months), (2000+BCDToDecimal(pInputData->Year)));
 258:	80 53       	subi	r24, 0x30	; 48
 25a:	98 4f       	sbci	r25, 0xF8	; 248
 25c:	9f 93       	push	r25
 25e:	8f 93       	push	r24
 260:	25 2f       	mov	r18, r21
 262:	30 e0       	ldi	r19, 0x00	; 0
	return (((Decimal/10) << 4) | (Decimal % 10));
}

static int BCDToDecimal(int BCD)
{
	return (((BCD>>4)*10) + (BCD & 0xF));
 264:	35 95       	asr	r19
 266:	27 95       	ror	r18
 268:	35 95       	asr	r19
 26a:	27 95       	ror	r18
 26c:	35 95       	asr	r19
 26e:	27 95       	ror	r18
 270:	35 95       	asr	r19
 272:	27 95       	ror	r18
 274:	c9 01       	movw	r24, r18
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	22 0f       	add	r18, r18
 27c:	33 1f       	adc	r19, r19
 27e:	22 0f       	add	r18, r18
 280:	33 1f       	adc	r19, r19
 282:	22 0f       	add	r18, r18
 284:	33 1f       	adc	r19, r19
 286:	82 0f       	add	r24, r18
 288:	93 1f       	adc	r25, r19
 28a:	5f 70       	andi	r21, 0x0F	; 15
 28c:	85 0f       	add	r24, r21
 28e:	91 1d       	adc	r25, r1

	/* Storing Day No */
	pOutputData->eDay = pInputData->Day;
		
	/* Framing Date String */
	sprintf((char*)pOutputData->Date, "%02d-%02d-%04d", BCDToDecimal(pInputData->Date), BCDToDecimal(pInputData->Months), (2000+BCDToDecimal(pInputData->Year)));
 290:	9f 93       	push	r25
 292:	8f 93       	push	r24
 294:	24 2f       	mov	r18, r20
 296:	30 e0       	ldi	r19, 0x00	; 0
	return (((Decimal/10) << 4) | (Decimal % 10));
}

static int BCDToDecimal(int BCD)
{
	return (((BCD>>4)*10) + (BCD & 0xF));
 298:	35 95       	asr	r19
 29a:	27 95       	ror	r18
 29c:	35 95       	asr	r19
 29e:	27 95       	ror	r18
 2a0:	35 95       	asr	r19
 2a2:	27 95       	ror	r18
 2a4:	35 95       	asr	r19
 2a6:	27 95       	ror	r18
 2a8:	c9 01       	movw	r24, r18
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	22 0f       	add	r18, r18
 2b0:	33 1f       	adc	r19, r19
 2b2:	22 0f       	add	r18, r18
 2b4:	33 1f       	adc	r19, r19
 2b6:	22 0f       	add	r18, r18
 2b8:	33 1f       	adc	r19, r19
 2ba:	82 0f       	add	r24, r18
 2bc:	93 1f       	adc	r25, r19
 2be:	4f 70       	andi	r20, 0x0F	; 15
 2c0:	84 0f       	add	r24, r20
 2c2:	91 1d       	adc	r25, r1

	/* Storing Day No */
	pOutputData->eDay = pInputData->Day;
		
	/* Framing Date String */
	sprintf((char*)pOutputData->Date, "%02d-%02d-%04d", BCDToDecimal(pInputData->Date), BCDToDecimal(pInputData->Months), (2000+BCDToDecimal(pInputData->Year)));
 2c4:	9f 93       	push	r25
 2c6:	8f 93       	push	r24
 2c8:	86 e6       	ldi	r24, 0x66	; 102
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	9f 93       	push	r25
 2ce:	8f 93       	push	r24
 2d0:	ff 92       	push	r15
 2d2:	ef 92       	push	r14
 2d4:	54 d2       	rcall	.+1192   	; 0x77e <sprintf>
	
	/* Refining the Data based on 12 or 24 hrs format */
	if((pInputData->Hrs & 0x40) == 0x40)
 2d6:	f8 01       	movw	r30, r16
 2d8:	22 81       	ldd	r18, Z+2	; 0x02
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	f8 94       	cli
 2de:	de bf       	out	0x3e, r29	; 62
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	cd bf       	out	0x3d, r28	; 61
 2e4:	26 ff       	sbrs	r18, 6
 2e6:	17 c0       	rjmp	.+46     	; 0x316 <Bcd2Data+0x12c>
	{
		if((pInputData->Hrs & 0x20) == 0x20)
 2e8:	25 ff       	sbrs	r18, 5
 2ea:	09 c0       	rjmp	.+18     	; 0x2fe <Bcd2Data+0x114>
		{
			strcpy((char*)TimeFormat, " PM");
 2ec:	80 e2       	ldi	r24, 0x20	; 32
 2ee:	90 e5       	ldi	r25, 0x50	; 80
 2f0:	ad e4       	ldi	r26, 0x4D	; 77
 2f2:	b0 e0       	ldi	r27, 0x00	; 0
 2f4:	89 83       	std	Y+1, r24	; 0x01
 2f6:	9a 83       	std	Y+2, r25	; 0x02
 2f8:	ab 83       	std	Y+3, r26	; 0x03
 2fa:	bc 83       	std	Y+4, r27	; 0x04
 2fc:	08 c0       	rjmp	.+16     	; 0x30e <Bcd2Data+0x124>
		}
		else
		{
			strcpy((char*)TimeFormat, " AM");
 2fe:	40 e2       	ldi	r20, 0x20	; 32
 300:	51 e4       	ldi	r21, 0x41	; 65
 302:	6d e4       	ldi	r22, 0x4D	; 77
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	49 83       	std	Y+1, r20	; 0x01
 308:	5a 83       	std	Y+2, r21	; 0x02
 30a:	6b 83       	std	Y+3, r22	; 0x03
 30c:	7c 83       	std	Y+4, r23	; 0x04
		}
		pInputData->Hrs &= 0x1F;
 30e:	2f 71       	andi	r18, 0x1F	; 31
 310:	d8 01       	movw	r26, r16
 312:	12 96       	adiw	r26, 0x02	; 2
 314:	2c 93       	st	X, r18
	}
	
	/* Framing Time String */
	sprintf((char*)pOutputData->Time, "%02d:%02d:%02d%s", BCDToDecimal(pInputData->Hrs), BCDToDecimal(pInputData->Mins), BCDToDecimal(pInputData->Secs), TimeFormat);
 316:	f8 01       	movw	r30, r16
 318:	60 81       	ld	r22, Z
 31a:	51 81       	ldd	r21, Z+1	; 0x01
 31c:	42 81       	ldd	r20, Z+2	; 0x02
 31e:	ce 01       	movw	r24, r28
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	9f 93       	push	r25
 324:	8f 93       	push	r24
 326:	26 2f       	mov	r18, r22
 328:	30 e0       	ldi	r19, 0x00	; 0
	return (((Decimal/10) << 4) | (Decimal % 10));
}

static int BCDToDecimal(int BCD)
{
	return (((BCD>>4)*10) + (BCD & 0xF));
 32a:	35 95       	asr	r19
 32c:	27 95       	ror	r18
 32e:	35 95       	asr	r19
 330:	27 95       	ror	r18
 332:	35 95       	asr	r19
 334:	27 95       	ror	r18
 336:	35 95       	asr	r19
 338:	27 95       	ror	r18
 33a:	c9 01       	movw	r24, r18
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	22 0f       	add	r18, r18
 342:	33 1f       	adc	r19, r19
 344:	22 0f       	add	r18, r18
 346:	33 1f       	adc	r19, r19
 348:	22 0f       	add	r18, r18
 34a:	33 1f       	adc	r19, r19
 34c:	82 0f       	add	r24, r18
 34e:	93 1f       	adc	r25, r19
 350:	6f 70       	andi	r22, 0x0F	; 15
 352:	86 0f       	add	r24, r22
 354:	91 1d       	adc	r25, r1
		}
		pInputData->Hrs &= 0x1F;
	}
	
	/* Framing Time String */
	sprintf((char*)pOutputData->Time, "%02d:%02d:%02d%s", BCDToDecimal(pInputData->Hrs), BCDToDecimal(pInputData->Mins), BCDToDecimal(pInputData->Secs), TimeFormat);
 356:	9f 93       	push	r25
 358:	8f 93       	push	r24
 35a:	25 2f       	mov	r18, r21
 35c:	30 e0       	ldi	r19, 0x00	; 0
	return (((Decimal/10) << 4) | (Decimal % 10));
}

static int BCDToDecimal(int BCD)
{
	return (((BCD>>4)*10) + (BCD & 0xF));
 35e:	35 95       	asr	r19
 360:	27 95       	ror	r18
 362:	35 95       	asr	r19
 364:	27 95       	ror	r18
 366:	35 95       	asr	r19
 368:	27 95       	ror	r18
 36a:	35 95       	asr	r19
 36c:	27 95       	ror	r18
 36e:	c9 01       	movw	r24, r18
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	22 0f       	add	r18, r18
 376:	33 1f       	adc	r19, r19
 378:	22 0f       	add	r18, r18
 37a:	33 1f       	adc	r19, r19
 37c:	22 0f       	add	r18, r18
 37e:	33 1f       	adc	r19, r19
 380:	82 0f       	add	r24, r18
 382:	93 1f       	adc	r25, r19
 384:	5f 70       	andi	r21, 0x0F	; 15
 386:	85 0f       	add	r24, r21
 388:	91 1d       	adc	r25, r1
		}
		pInputData->Hrs &= 0x1F;
	}
	
	/* Framing Time String */
	sprintf((char*)pOutputData->Time, "%02d:%02d:%02d%s", BCDToDecimal(pInputData->Hrs), BCDToDecimal(pInputData->Mins), BCDToDecimal(pInputData->Secs), TimeFormat);
 38a:	9f 93       	push	r25
 38c:	8f 93       	push	r24
 38e:	24 2f       	mov	r18, r20
 390:	30 e0       	ldi	r19, 0x00	; 0
	return (((Decimal/10) << 4) | (Decimal % 10));
}

static int BCDToDecimal(int BCD)
{
	return (((BCD>>4)*10) + (BCD & 0xF));
 392:	35 95       	asr	r19
 394:	27 95       	ror	r18
 396:	35 95       	asr	r19
 398:	27 95       	ror	r18
 39a:	35 95       	asr	r19
 39c:	27 95       	ror	r18
 39e:	35 95       	asr	r19
 3a0:	27 95       	ror	r18
 3a2:	c9 01       	movw	r24, r18
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	22 0f       	add	r18, r18
 3aa:	33 1f       	adc	r19, r19
 3ac:	22 0f       	add	r18, r18
 3ae:	33 1f       	adc	r19, r19
 3b0:	22 0f       	add	r18, r18
 3b2:	33 1f       	adc	r19, r19
 3b4:	82 0f       	add	r24, r18
 3b6:	93 1f       	adc	r25, r19
 3b8:	4f 70       	andi	r20, 0x0F	; 15
 3ba:	84 0f       	add	r24, r20
 3bc:	91 1d       	adc	r25, r1
		}
		pInputData->Hrs &= 0x1F;
	}
	
	/* Framing Time String */
	sprintf((char*)pOutputData->Time, "%02d:%02d:%02d%s", BCDToDecimal(pInputData->Hrs), BCDToDecimal(pInputData->Mins), BCDToDecimal(pInputData->Secs), TimeFormat);
 3be:	9f 93       	push	r25
 3c0:	8f 93       	push	r24
 3c2:	85 e7       	ldi	r24, 0x75	; 117
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	9f 93       	push	r25
 3c8:	8f 93       	push	r24
 3ca:	ff e0       	ldi	r31, 0x0F	; 15
 3cc:	ef 0e       	add	r14, r31
 3ce:	f1 1c       	adc	r15, r1
 3d0:	ff 92       	push	r15
 3d2:	ef 92       	push	r14
 3d4:	d4 d1       	rcall	.+936    	; 0x77e <sprintf>
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	f8 94       	cli
 3da:	de bf       	out	0x3e, r29	; 62
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	cd bf       	out	0x3d, r28	; 61
}
 3e0:	2a 96       	adiw	r28, 0x0a	; 10
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	f8 94       	cli
 3e6:	de bf       	out	0x3e, r29	; 62
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	cd bf       	out	0x3d, r28	; 61
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	ff 90       	pop	r15
 3f6:	ef 90       	pop	r14
 3f8:	08 95       	ret

000003fa <DS1307_Read>:
	/* Stop I2C Transfer */
	I2C_stop();
}

DataDateTime DS1307_Read(void)
{
 3fa:	0f 93       	push	r16
 3fc:	1f 93       	push	r17
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
 406:	a7 97       	sbiw	r28, 0x27	; 39
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	f8 94       	cli
 40c:	de bf       	out	0x3e, r29	; 62
 40e:	0f be       	out	0x3f, r0	; 63
 410:	cd bf       	out	0x3d, r28	; 61
 412:	8c 01       	movw	r16, r24
	BcdDateTime BcdregData;
	DataDateTime GetDateTime;
	
	/* Start I2C Transfer */
	I2C_start();
 414:	43 d0       	rcall	.+134    	; 0x49c <I2C_start>
	
	/* Select Slave device to Write of Address D0H */
	I2C_write(WriteAddress, SLAVE_ADDRESS);
 416:	60 ed       	ldi	r22, 0xD0	; 208
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	46 d0       	rcall	.+140    	; 0x4a8 <I2C_write>
	
	/* Set Reg Address to 00H */
	I2C_write(WriteData, SLAVE_REG_ADDRESS);
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	43 d0       	rcall	.+134    	; 0x4a8 <I2C_write>
	
	/* Start I2C Transfer */
	I2C_stop();
 422:	5c d0       	rcall	.+184    	; 0x4dc <I2C_stop>
	
	/* Start I2C Transfer */
	I2C_start();
 424:	3b d0       	rcall	.+118    	; 0x49c <I2C_start>
	
	/* Select Slave device to Read of Address D1H */
	I2C_write(ReadAddress, SLAVE_ADDRESS);
 426:	60 ed       	ldi	r22, 0xD0	; 208
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	3e d0       	rcall	.+124    	; 0x4a8 <I2C_write>
	
	/* Reading Seconds Value */
	BcdregData.Secs = I2C_Read(ACK);
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	66 d0       	rcall	.+204    	; 0x4fc <I2C_Read>
 430:	89 83       	std	Y+1, r24	; 0x01
	
	/* Reading Minutes Value */
	BcdregData.Mins = I2C_Read(ACK);
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	63 d0       	rcall	.+198    	; 0x4fc <I2C_Read>
 436:	8a 83       	std	Y+2, r24	; 0x02
	
	/* Reading Hours Value */
	BcdregData.Hrs = I2C_Read(ACK);
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	60 d0       	rcall	.+192    	; 0x4fc <I2C_Read>
 43c:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Reading Day Value */
	BcdregData.Day = I2C_Read(ACK);
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	5d d0       	rcall	.+186    	; 0x4fc <I2C_Read>
 442:	8c 83       	std	Y+4, r24	; 0x04
	
	/* Reading Date Value */
	BcdregData.Date = I2C_Read(ACK);
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	5a d0       	rcall	.+180    	; 0x4fc <I2C_Read>
 448:	8d 83       	std	Y+5, r24	; 0x05
	
	/* Reading Months Value */
	BcdregData.Months = I2C_Read(ACK);
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	57 d0       	rcall	.+174    	; 0x4fc <I2C_Read>
 44e:	8e 83       	std	Y+6, r24	; 0x06
	
	/* Reading Year Value */
	BcdregData.Year = I2C_Read(ACK);
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	54 d0       	rcall	.+168    	; 0x4fc <I2C_Read>
 454:	8f 83       	std	Y+7, r24	; 0x07
	
	/* Reading 07H Reg Value */
	BcdregData.Unknown = I2C_Read(NACK);
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	51 d0       	rcall	.+162    	; 0x4fc <I2C_Read>
 45a:	88 87       	std	Y+8, r24	; 0x08

	/* Start I2C Transfer */
	I2C_stop();
 45c:	3f d0       	rcall	.+126    	; 0x4dc <I2C_stop>
	
	/*Converting BCDFormat data into Format of DataDateTime data */
	Bcd2Data(&BcdregData, &GetDateTime);
 45e:	be 01       	movw	r22, r28
 460:	67 5f       	subi	r22, 0xF7	; 247
 462:	7f 4f       	sbci	r23, 0xFF	; 255
 464:	ce 01       	movw	r24, r28
 466:	01 96       	adiw	r24, 0x01	; 1
 468:	c0 de       	rcall	.-640    	; 0x1ea <Bcd2Data>
	
	return GetDateTime;
 46a:	8f e1       	ldi	r24, 0x1F	; 31
 46c:	fe 01       	movw	r30, r28
 46e:	39 96       	adiw	r30, 0x09	; 9
 470:	d8 01       	movw	r26, r16
 472:	01 90       	ld	r0, Z+
 474:	0d 92       	st	X+, r0
 476:	8a 95       	dec	r24
 478:	e1 f7       	brne	.-8      	; 0x472 <__stack+0x13>
}
 47a:	c8 01       	movw	r24, r16
 47c:	a7 96       	adiw	r28, 0x27	; 39
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	f8 94       	cli
 482:	de bf       	out	0x3e, r29	; 62
 484:	0f be       	out	0x3f, r0	; 63
 486:	cd bf       	out	0x3d, r28	; 61
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	1f 91       	pop	r17
 48e:	0f 91       	pop	r16
 490:	08 95       	ret

00000492 <I2C_init>:
#include <util/delay.h>

void I2C_init(void)
{
	/* Initializing I2C SCL */
	SCL_HIGH;
 492:	ad 9a       	sbi	0x15, 5	; 21
	SCL_OUTPUT;
 494:	a5 9a       	sbi	0x14, 5	; 20
	
	/* Initializing I2C SDA */
	SDA_HIGH;
 496:	ac 9a       	sbi	0x15, 4	; 21
	SDA_OUTPUT;
 498:	a4 9a       	sbi	0x14, 4	; 20
 49a:	08 95       	ret

0000049c <I2C_start>:
}

void I2C_start(void)
{
	/* Set I2C SDA as OUTPUT */
	SDA_OUTPUT;
 49c:	a4 9a       	sbi	0x14, 4	; 20
	
	/* Set SCL & SDA HIGH */
	SCL_HIGH;
 49e:	ad 9a       	sbi	0x15, 5	; 21
	SDA_HIGH;
 4a0:	ac 9a       	sbi	0x15, 4	; 21
	
	/* Set SCL & SDA LOW */
	SDA_LOW;
 4a2:	ac 98       	cbi	0x15, 4	; 21
	SCL_LOW;
 4a4:	ad 98       	cbi	0x15, 5	; 21
 4a6:	08 95       	ret

000004a8 <I2C_write>:
void I2C_write(WriteMode eMode, uint8_t data)
{
	int bitcounter;
	
	/* Set I2C SDA as OUTPUT */
	SDA_OUTPUT;
 4a8:	a4 9a       	sbi	0x14, 4	; 20
	
	/* Make LSB as 1 in case read from slave */
	if(eMode == ReadAddress)
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	a1 f4       	brne	.+40     	; 0x4d6 <I2C_write+0x2e>
	{
		data |= 1;
 4ae:	61 60       	ori	r22, 0x01	; 1
 4b0:	12 c0       	rjmp	.+36     	; 0x4d6 <I2C_write+0x2e>

	/* Send Data starts from MSB to LSB */
	for(bitcounter=0; bitcounter<8; bitcounter++)
	{
		/* Format SDA Line as per Data */
		if((data & 0x80))
 4b2:	66 23       	and	r22, r22
 4b4:	14 f4       	brge	.+4      	; 0x4ba <I2C_write+0x12>
		{
			SDA_HIGH;
 4b6:	ac 9a       	sbi	0x15, 4	; 21
 4b8:	01 c0       	rjmp	.+2      	; 0x4bc <I2C_write+0x14>
		}
		else
		{
			SDA_LOW;
 4ba:	ac 98       	cbi	0x15, 4	; 21
		}
		
		/* Do one clock transaction */
		SCL_HIGH;
 4bc:	ad 9a       	sbi	0x15, 5	; 21
		SCL_LOW;	
 4be:	ad 98       	cbi	0x15, 5	; 21
		data <<= 1;
 4c0:	66 0f       	add	r22, r22
 4c2:	01 97       	sbiw	r24, 0x01	; 1
	{
		data |= 1;
	}

	/* Send Data starts from MSB to LSB */
	for(bitcounter=0; bitcounter<8; bitcounter++)
 4c4:	00 97       	sbiw	r24, 0x00	; 0
 4c6:	a9 f7       	brne	.-22     	; 0x4b2 <I2C_write+0xa>
		SCL_LOW;	
		data <<= 1;
	}
	
	/* Set SDA to LOW in case if the last bit is one to make line availble for slave */
	if((PORTC & 0x10))
 4c8:	ac 99       	sbic	0x15, 4	; 21
	{
		SDA_LOW;
 4ca:	ac 98       	cbi	0x15, 4	; 21
	}

	/* check for ACK */
	SCL_HIGH;
 4cc:	ad 9a       	sbi	0x15, 5	; 21
	while((PORTC & 0x10));
 4ce:	ac 99       	sbic	0x15, 4	; 21
 4d0:	fe cf       	rjmp	.-4      	; 0x4ce <I2C_write+0x26>
	SCL_LOW;
 4d2:	ad 98       	cbi	0x15, 5	; 21
 4d4:	08 95       	ret
	SDA_LOW;
	SCL_LOW;
}

void I2C_write(WriteMode eMode, uint8_t data)
{
 4d6:	88 e0       	ldi	r24, 0x08	; 8
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	eb cf       	rjmp	.-42     	; 0x4b2 <I2C_write+0xa>

000004dc <I2C_stop>:
}

void I2C_stop(void)
{
	/* Set I2C SDA as OUTPUT */
	SDA_OUTPUT;
 4dc:	a4 9a       	sbi	0x14, 4	; 20
	
	/* Set SCL & SDA LOW */
	SCL_LOW;
 4de:	ad 98       	cbi	0x15, 5	; 21
	SDA_LOW;	
 4e0:	ac 98       	cbi	0x15, 4	; 21
	
	/* Set SCL & SDA HIGH */
	SCL_HIGH;
 4e2:	ad 9a       	sbi	0x15, 5	; 21
	SDA_HIGH;
 4e4:	ac 9a       	sbi	0x15, 4	; 21
 4e6:	08 95       	ret

000004e8 <I2C_ACK>:


void I2C_ACK(void)
{
	/* Set I2C SDA as OUTPUT */
	SDA_OUTPUT;
 4e8:	a4 9a       	sbi	0x14, 4	; 20
	
	/* Set SDA to HIGH to make ACK */
	SDA_LOW;
 4ea:	ac 98       	cbi	0x15, 4	; 21
	
	/* Do one clock transaction */
	SCL_HIGH;
 4ec:	ad 9a       	sbi	0x15, 5	; 21
	SCL_LOW;
 4ee:	ad 98       	cbi	0x15, 5	; 21
 4f0:	08 95       	ret

000004f2 <I2C_NACK>:
}

void I2C_NACK(void)
{
	/* Set I2C SDA as OUTPUT */
	SDA_OUTPUT;
 4f2:	a4 9a       	sbi	0x14, 4	; 20
	
	/* Set SDA to HIGH to make NACK */
	SDA_HIGH;
 4f4:	ac 9a       	sbi	0x15, 4	; 21
	
	/* Do one clock transaction */
	SCL_HIGH;
 4f6:	ad 9a       	sbi	0x15, 5	; 21
	SCL_LOW;
 4f8:	ad 98       	cbi	0x15, 5	; 21
 4fa:	08 95       	ret

000004fc <I2C_Read>:
	while((PORTC & 0x10));
	SCL_LOW;
}

unsigned char I2C_Read(AckReturn eAckType)
{	
 4fc:	cf 93       	push	r28
	int bitcounter;
	unsigned char Data = 0x00;
	
	/* Set I2C SDA as INPUT */
	SDA_INPUT;
 4fe:	a4 98       	cbi	0x14, 4	; 20
 500:	28 e0       	ldi	r18, 0x08	; 8
 502:	30 e0       	ldi	r19, 0x00	; 0
}

unsigned char I2C_Read(AckReturn eAckType)
{	
	int bitcounter;
	unsigned char Data = 0x00;
 504:	c0 e0       	ldi	r28, 0x00	; 0
	SDA_INPUT;
	
	/* Read Data starts from MSB to LSB */
	for(bitcounter=0; bitcounter<8; bitcounter++)
	{
		Data <<= 1;
 506:	cc 0f       	add	r28, r28
		SCL_HIGH;
 508:	ad 9a       	sbi	0x15, 5	; 21
		
		if((INPUT_PIN & 0x10))
 50a:	9c 99       	sbic	0x13, 4	; 19
		{
			Data |= 1;
 50c:	c1 60       	ori	r28, 0x01	; 1
		else
		{
			Data |= 0;
		}
		
		SCL_LOW;
 50e:	ad 98       	cbi	0x15, 5	; 21
 510:	21 50       	subi	r18, 0x01	; 1
 512:	31 09       	sbc	r19, r1
	
	/* Set I2C SDA as INPUT */
	SDA_INPUT;
	
	/* Read Data starts from MSB to LSB */
	for(bitcounter=0; bitcounter<8; bitcounter++)
 514:	21 15       	cp	r18, r1
 516:	31 05       	cpc	r19, r1
 518:	b1 f7       	brne	.-20     	; 0x506 <I2C_Read+0xa>
		
		SCL_LOW;
	}
	
	/* Send ACK or NACK depending upon the situation */
	if(eAckType == ACK)
 51a:	81 11       	cpse	r24, r1
 51c:	02 c0       	rjmp	.+4      	; 0x522 <I2C_Read+0x26>
	{
		I2C_ACK();
 51e:	e4 df       	rcall	.-56     	; 0x4e8 <I2C_ACK>
 520:	03 c0       	rjmp	.+6      	; 0x528 <I2C_Read+0x2c>
	}
	else if(eAckType == NACK)
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	09 f4       	brne	.+2      	; 0x528 <I2C_Read+0x2c>
	{
		I2C_NACK();
 526:	e5 df       	rcall	.-54     	; 0x4f2 <I2C_NACK>
	}
	
	return Data;
}
 528:	8c 2f       	mov	r24, r28
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <LCD_cmd>:
}

void LCD_cmd(uint8_t command)
{
	/* set LCD into the command reg mode & disabling the LCD enable pin*/	
	PORTB = (0<<PORTB0)|(1<<PORTB2);
 52e:	94 e0       	ldi	r25, 0x04	; 4
 530:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 532:	ef e0       	ldi	r30, 0x0F	; 15
 534:	f7 e2       	ldi	r31, 0x27	; 39
 536:	31 97       	sbiw	r30, 0x01	; 1
 538:	f1 f7       	brne	.-4      	; 0x536 <LCD_cmd+0x8>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <LCD_cmd+0xe>
 53c:	00 00       	nop
	_delay_ms(5);
	
	/* Loading command into the PORTD */
	PORTD = command;
 53e:	82 bb       	out	0x12, r24	; 18
	
	/* Keeping LCD into the command reg mode & latching command to LCD using enable */
	PORTB = (0<<PORTB0)|(0<<PORTB2);
 540:	18 ba       	out	0x18, r1	; 24
 542:	8f e0       	ldi	r24, 0x0F	; 15
 544:	97 e2       	ldi	r25, 0x27	; 39
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <LCD_cmd+0x18>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <LCD_cmd+0x1e>
 54c:	00 00       	nop
 54e:	08 95       	ret

00000550 <LCD_init>:
#include "LCD.h"

void LCD_init(void)
{
	/* LCD control bus */
	DDRB |= 0xFF;
 550:	87 b3       	in	r24, 0x17	; 23
 552:	8f ef       	ldi	r24, 0xFF	; 255
 554:	87 bb       	out	0x17, r24	; 23
	
	/* LCD data bus */
	DDRD |= 0xFF;
 556:	91 b3       	in	r25, 0x11	; 17
 558:	81 bb       	out	0x11, r24	; 17
	
	/* Initialize the bus to zero */
	PORTB = 0x00;
 55a:	18 ba       	out	0x18, r1	; 24
	PORTD = 0x00;
 55c:	12 ba       	out	0x12, r1	; 18
	
	/* 8bit LCD control */
	LCD_cmd(0x38);
 55e:	88 e3       	ldi	r24, 0x38	; 56
 560:	e6 df       	rcall	.-52     	; 0x52e <LCD_cmd>
	
	/* Display ON and cursor ON (blinking off) */
	LCD_cmd(0x0E);
 562:	8e e0       	ldi	r24, 0x0E	; 14
 564:	e4 df       	rcall	.-56     	; 0x52e <LCD_cmd>
	
	/* clear last print */
	LCD_cmd(0x01);
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	e2 df       	rcall	.-60     	; 0x52e <LCD_cmd>
 56a:	8f e0       	ldi	r24, 0x0F	; 15
 56c:	97 e2       	ldi	r25, 0x27	; 39
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <LCD_init+0x1e>
 572:	00 c0       	rjmp	.+0      	; 0x574 <LCD_init+0x24>
 574:	00 00       	nop
 576:	08 95       	ret

00000578 <LCD_data>:
}

void LCD_data(uint8_t data)
{
	/* set LCD into the data reg mode & disabling the LCD enable pin*/
	PORTB = (1<<PORTB0)|(1<<PORTB2);
 578:	95 e0       	ldi	r25, 0x05	; 5
 57a:	98 bb       	out	0x18, r25	; 24
 57c:	ef e0       	ldi	r30, 0x0F	; 15
 57e:	f7 e2       	ldi	r31, 0x27	; 39
 580:	31 97       	sbiw	r30, 0x01	; 1
 582:	f1 f7       	brne	.-4      	; 0x580 <LCD_data+0x8>
 584:	00 c0       	rjmp	.+0      	; 0x586 <LCD_data+0xe>
 586:	00 00       	nop
	_delay_ms(5);
	
	/* Loading data into the PORTD */
	PORTD = data;
 588:	82 bb       	out	0x12, r24	; 18

	/* Keeping LCD into the data reg mode & latching data to LCD using enable */
	PORTB = (1<<PORTB0)|(0<<PORTB2);
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	88 bb       	out	0x18, r24	; 24
 58e:	8f e0       	ldi	r24, 0x0F	; 15
 590:	97 e2       	ldi	r25, 0x27	; 39
 592:	01 97       	sbiw	r24, 0x01	; 1
 594:	f1 f7       	brne	.-4      	; 0x592 <LCD_data+0x1a>
 596:	00 c0       	rjmp	.+0      	; 0x598 <LCD_data+0x20>
 598:	00 00       	nop
 59a:	08 95       	ret

0000059c <LCD_print>:
	_delay_ms(5);
}

void LCD_print(int line_no, char *info)
{
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
 5a0:	eb 01       	movw	r28, r22
	int i;
	
	/* clear last print */
//	LCD_cmd(0x01);
	
	if(line_no == 1)
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	19 f4       	brne	.+6      	; 0x5ac <LCD_print+0x10>
	{
		/* cursor to first row of LCD */
		LCD_cmd(0x80);
 5a6:	80 e8       	ldi	r24, 0x80	; 128
 5a8:	c2 df       	rcall	.-124    	; 0x52e <LCD_cmd>
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <LCD_print+0x14>
	}
	else
	{
		/* cursor to second row of LCD */
		LCD_cmd(0xC0);	
 5ac:	80 ec       	ldi	r24, 0xC0	; 192
 5ae:	bf df       	rcall	.-130    	; 0x52e <LCD_cmd>
	}

	for(i=0;info[i] != 0;i++)
 5b0:	88 81       	ld	r24, Y
 5b2:	88 23       	and	r24, r24
 5b4:	29 f0       	breq	.+10     	; 0x5c0 <LCD_print+0x24>
 5b6:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_data(info[i]);
 5b8:	df df       	rcall	.-66     	; 0x578 <LCD_data>
	{
		/* cursor to second row of LCD */
		LCD_cmd(0xC0);	
	}

	for(i=0;info[i] != 0;i++)
 5ba:	89 91       	ld	r24, Y+
 5bc:	81 11       	cpse	r24, r1
 5be:	fc cf       	rjmp	.-8      	; 0x5b8 <LCD_print+0x1c>
	{
		LCD_data(info[i]);
	}	
}
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	08 95       	ret

000005c6 <main>:
#include <string.h>
#define F_CPU 8000000
#include <util/delay.h>

int main(void)
{
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	cd b7       	in	r28, 0x3d	; 61
 5cc:	de b7       	in	r29, 0x3e	; 62
 5ce:	cd 55       	subi	r28, 0x5D	; 93
 5d0:	d1 09       	sbc	r29, r1
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	f8 94       	cli
 5d6:	de bf       	out	0x3e, r29	; 62
 5d8:	0f be       	out	0x3f, r0	; 63
 5da:	cd bf       	out	0x3d, r28	; 61
	DataDateTime SetDateTime;
	DataDateTime GetDateTime;
	
	/* Initializing LCD */
	LCD_init();
 5dc:	b9 df       	rcall	.-142    	; 0x550 <LCD_init>
	
	/* Initializing I2C Module */
	I2C_init();
 5de:	59 df       	rcall	.-334    	; 0x492 <I2C_init>
	
	/* Set the current date, day and time */
	strcpy((char*)SetDateTime.Time, "11:59:55 PM");
 5e0:	8c e0       	ldi	r24, 0x0C	; 12
 5e2:	e6 e8       	ldi	r30, 0x86	; 134
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	de 01       	movw	r26, r28
 5e8:	50 96       	adiw	r26, 0x10	; 16
 5ea:	01 90       	ld	r0, Z+
 5ec:	0d 92       	st	X+, r0
 5ee:	8a 95       	dec	r24
 5f0:	e1 f7       	brne	.-8      	; 0x5ea <main+0x24>
//	strcpy((char*)SetDateTime.Time, "23:59:55");
	strcpy((char*)SetDateTime.Date, "26-07-18");
 5f2:	89 e0       	ldi	r24, 0x09	; 9
 5f4:	e2 e9       	ldi	r30, 0x92	; 146
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	de 01       	movw	r26, r28
 5fa:	11 96       	adiw	r26, 0x01	; 1
 5fc:	01 90       	ld	r0, Z+
 5fe:	0d 92       	st	X+, r0
 600:	8a 95       	dec	r24
 602:	e1 f7       	brne	.-8      	; 0x5fc <main+0x36>
	SetDateTime.eDay = Sunday;
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	8f 8f       	std	Y+31, r24	; 0x1f

	/* Writing current Date, Day and Time into RTC */
	DS1307_Write(SetDateTime);
 608:	8d b7       	in	r24, 0x3d	; 61
 60a:	9e b7       	in	r25, 0x3e	; 62
 60c:	4f 97       	sbiw	r24, 0x1f	; 31
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	f8 94       	cli
 612:	9e bf       	out	0x3e, r25	; 62
 614:	0f be       	out	0x3f, r0	; 63
 616:	8d bf       	out	0x3d, r24	; 61
 618:	ad b7       	in	r26, 0x3d	; 61
 61a:	be b7       	in	r27, 0x3e	; 62
 61c:	11 96       	adiw	r26, 0x01	; 1
 61e:	8f e1       	ldi	r24, 0x1F	; 31
 620:	fe 01       	movw	r30, r28
 622:	31 96       	adiw	r30, 0x01	; 1
 624:	01 90       	ld	r0, Z+
 626:	0d 92       	st	X+, r0
 628:	8a 95       	dec	r24
 62a:	e1 f7       	brne	.-8      	; 0x624 <main+0x5e>
 62c:	a8 dd       	rcall	.-1200   	; 0x17e <DS1307_Write>
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	f8 94       	cli
 632:	de bf       	out	0x3e, r29	; 62
 634:	0f be       	out	0x3f, r0	; 63
 636:	cd bf       	out	0x3d, r28	; 61
	
	while(1)
	{
		/* Reading Date and Time from RTC */
		GetDateTime = DS1307_Read();
 638:	1f e1       	ldi	r17, 0x1F	; 31
 63a:	ce 01       	movw	r24, r28
 63c:	cf 96       	adiw	r24, 0x3f	; 63
 63e:	dd de       	rcall	.-582    	; 0x3fa <DS1307_Read>
 640:	fe 01       	movw	r30, r28
 642:	ff 96       	adiw	r30, 0x3f	; 63
 644:	de 01       	movw	r26, r28
 646:	90 96       	adiw	r26, 0x20	; 32
 648:	81 2f       	mov	r24, r17
 64a:	01 90       	ld	r0, Z+
 64c:	0d 92       	st	X+, r0
 64e:	8a 95       	dec	r24
 650:	e1 f7       	brne	.-8      	; 0x64a <main+0x84>
		
		/* Printing the result into LCD */
		LCD_print(1, (char*)GetDateTime.Time);
 652:	be 01       	movw	r22, r28
 654:	61 5d       	subi	r22, 0xD1	; 209
 656:	7f 4f       	sbci	r23, 0xFF	; 255
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	9f df       	rcall	.-194    	; 0x59c <LCD_print>
		LCD_print(2, (char*)GetDateTime.Date);
 65e:	be 01       	movw	r22, r28
 660:	60 5e       	subi	r22, 0xE0	; 224
 662:	7f 4f       	sbci	r23, 0xFF	; 255
 664:	82 e0       	ldi	r24, 0x02	; 2
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	99 df       	rcall	.-206    	; 0x59c <LCD_print>
 66a:	9f ef       	ldi	r25, 0xFF	; 255
 66c:	2d e3       	ldi	r18, 0x3D	; 61
 66e:	89 e4       	ldi	r24, 0x49	; 73
 670:	91 50       	subi	r25, 0x01	; 1
 672:	20 40       	sbci	r18, 0x00	; 0
 674:	80 40       	sbci	r24, 0x00	; 0
 676:	e1 f7       	brne	.-8      	; 0x670 <main+0xaa>
 678:	00 c0       	rjmp	.+0      	; 0x67a <main+0xb4>
 67a:	00 00       	nop
 67c:	de cf       	rjmp	.-68     	; 0x63a <main+0x74>

0000067e <__divmodhi4>:
 67e:	97 fb       	bst	r25, 7
 680:	07 2e       	mov	r0, r23
 682:	16 f4       	brtc	.+4      	; 0x688 <__divmodhi4+0xa>
 684:	00 94       	com	r0
 686:	06 d0       	rcall	.+12     	; 0x694 <__divmodhi4_neg1>
 688:	77 fd       	sbrc	r23, 7
 68a:	08 d0       	rcall	.+16     	; 0x69c <__divmodhi4_neg2>
 68c:	0b d0       	rcall	.+22     	; 0x6a4 <__udivmodhi4>
 68e:	07 fc       	sbrc	r0, 7
 690:	05 d0       	rcall	.+10     	; 0x69c <__divmodhi4_neg2>
 692:	3e f4       	brtc	.+14     	; 0x6a2 <__divmodhi4_exit>

00000694 <__divmodhi4_neg1>:
 694:	90 95       	com	r25
 696:	81 95       	neg	r24
 698:	9f 4f       	sbci	r25, 0xFF	; 255
 69a:	08 95       	ret

0000069c <__divmodhi4_neg2>:
 69c:	70 95       	com	r23
 69e:	61 95       	neg	r22
 6a0:	7f 4f       	sbci	r23, 0xFF	; 255

000006a2 <__divmodhi4_exit>:
 6a2:	08 95       	ret

000006a4 <__udivmodhi4>:
 6a4:	aa 1b       	sub	r26, r26
 6a6:	bb 1b       	sub	r27, r27
 6a8:	51 e1       	ldi	r21, 0x11	; 17
 6aa:	07 c0       	rjmp	.+14     	; 0x6ba <__udivmodhi4_ep>

000006ac <__udivmodhi4_loop>:
 6ac:	aa 1f       	adc	r26, r26
 6ae:	bb 1f       	adc	r27, r27
 6b0:	a6 17       	cp	r26, r22
 6b2:	b7 07       	cpc	r27, r23
 6b4:	10 f0       	brcs	.+4      	; 0x6ba <__udivmodhi4_ep>
 6b6:	a6 1b       	sub	r26, r22
 6b8:	b7 0b       	sbc	r27, r23

000006ba <__udivmodhi4_ep>:
 6ba:	88 1f       	adc	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	5a 95       	dec	r21
 6c0:	a9 f7       	brne	.-22     	; 0x6ac <__udivmodhi4_loop>
 6c2:	80 95       	com	r24
 6c4:	90 95       	com	r25
 6c6:	bc 01       	movw	r22, r24
 6c8:	cd 01       	movw	r24, r26
 6ca:	08 95       	ret

000006cc <atoi>:
 6cc:	fc 01       	movw	r30, r24
 6ce:	88 27       	eor	r24, r24
 6d0:	99 27       	eor	r25, r25
 6d2:	e8 94       	clt
 6d4:	21 91       	ld	r18, Z+
 6d6:	20 32       	cpi	r18, 0x20	; 32
 6d8:	e9 f3       	breq	.-6      	; 0x6d4 <atoi+0x8>
 6da:	29 30       	cpi	r18, 0x09	; 9
 6dc:	10 f0       	brcs	.+4      	; 0x6e2 <atoi+0x16>
 6de:	2e 30       	cpi	r18, 0x0E	; 14
 6e0:	c8 f3       	brcs	.-14     	; 0x6d4 <atoi+0x8>
 6e2:	2b 32       	cpi	r18, 0x2B	; 43
 6e4:	39 f0       	breq	.+14     	; 0x6f4 <atoi+0x28>
 6e6:	2d 32       	cpi	r18, 0x2D	; 45
 6e8:	31 f4       	brne	.+12     	; 0x6f6 <atoi+0x2a>
 6ea:	68 94       	set
 6ec:	03 c0       	rjmp	.+6      	; 0x6f4 <atoi+0x28>
 6ee:	3f d0       	rcall	.+126    	; 0x76e <__mulhi_const_10>
 6f0:	82 0f       	add	r24, r18
 6f2:	91 1d       	adc	r25, r1
 6f4:	21 91       	ld	r18, Z+
 6f6:	20 53       	subi	r18, 0x30	; 48
 6f8:	2a 30       	cpi	r18, 0x0A	; 10
 6fa:	c8 f3       	brcs	.-14     	; 0x6ee <atoi+0x22>
 6fc:	1e f4       	brtc	.+6      	; 0x704 <atoi+0x38>
 6fe:	90 95       	com	r25
 700:	81 95       	neg	r24
 702:	9f 4f       	sbci	r25, 0xFF	; 255
 704:	08 95       	ret

00000706 <strtok>:
 706:	4c e9       	ldi	r20, 0x9C	; 156
 708:	50 e0       	ldi	r21, 0x00	; 0
 70a:	0a d0       	rcall	.+20     	; 0x720 <strtok_r>
 70c:	08 95       	ret

0000070e <strcmp>:
 70e:	fb 01       	movw	r30, r22
 710:	dc 01       	movw	r26, r24
 712:	8d 91       	ld	r24, X+
 714:	01 90       	ld	r0, Z+
 716:	80 19       	sub	r24, r0
 718:	01 10       	cpse	r0, r1
 71a:	d9 f3       	breq	.-10     	; 0x712 <strcmp+0x4>
 71c:	99 0b       	sbc	r25, r25
 71e:	08 95       	ret

00000720 <strtok_r>:
 720:	fa 01       	movw	r30, r20
 722:	a1 91       	ld	r26, Z+
 724:	b0 81       	ld	r27, Z
 726:	00 97       	sbiw	r24, 0x00	; 0
 728:	19 f4       	brne	.+6      	; 0x730 <strtok_r+0x10>
 72a:	10 97       	sbiw	r26, 0x00	; 0
 72c:	e1 f0       	breq	.+56     	; 0x766 <strtok_r+0x46>
 72e:	cd 01       	movw	r24, r26
 730:	dc 01       	movw	r26, r24
 732:	cd 01       	movw	r24, r26
 734:	0d 90       	ld	r0, X+
 736:	00 20       	and	r0, r0
 738:	11 f4       	brne	.+4      	; 0x73e <strtok_r+0x1e>
 73a:	c0 01       	movw	r24, r0
 73c:	13 c0       	rjmp	.+38     	; 0x764 <strtok_r+0x44>
 73e:	fb 01       	movw	r30, r22
 740:	21 91       	ld	r18, Z+
 742:	22 23       	and	r18, r18
 744:	19 f0       	breq	.+6      	; 0x74c <strtok_r+0x2c>
 746:	20 15       	cp	r18, r0
 748:	d9 f7       	brne	.-10     	; 0x740 <strtok_r+0x20>
 74a:	f3 cf       	rjmp	.-26     	; 0x732 <strtok_r+0x12>
 74c:	fb 01       	movw	r30, r22
 74e:	21 91       	ld	r18, Z+
 750:	20 15       	cp	r18, r0
 752:	19 f4       	brne	.+6      	; 0x75a <strtok_r+0x3a>
 754:	1e 92       	st	-X, r1
 756:	11 96       	adiw	r26, 0x01	; 1
 758:	06 c0       	rjmp	.+12     	; 0x766 <strtok_r+0x46>
 75a:	22 23       	and	r18, r18
 75c:	c1 f7       	brne	.-16     	; 0x74e <strtok_r+0x2e>
 75e:	0d 90       	ld	r0, X+
 760:	00 20       	and	r0, r0
 762:	a1 f7       	brne	.-24     	; 0x74c <strtok_r+0x2c>
 764:	d0 01       	movw	r26, r0
 766:	fa 01       	movw	r30, r20
 768:	a1 93       	st	Z+, r26
 76a:	b0 83       	st	Z, r27
 76c:	08 95       	ret

0000076e <__mulhi_const_10>:
 76e:	7a e0       	ldi	r23, 0x0A	; 10
 770:	97 9f       	mul	r25, r23
 772:	90 2d       	mov	r25, r0
 774:	87 9f       	mul	r24, r23
 776:	80 2d       	mov	r24, r0
 778:	91 0d       	add	r25, r1
 77a:	11 24       	eor	r1, r1
 77c:	08 95       	ret

0000077e <sprintf>:
 77e:	ae e0       	ldi	r26, 0x0E	; 14
 780:	b0 e0       	ldi	r27, 0x00	; 0
 782:	e4 ec       	ldi	r30, 0xC4	; 196
 784:	f3 e0       	ldi	r31, 0x03	; 3
 786:	91 c2       	rjmp	.+1314   	; 0xcaa <__prologue_saves__+0x1c>
 788:	0d 89       	ldd	r16, Y+21	; 0x15
 78a:	1e 89       	ldd	r17, Y+22	; 0x16
 78c:	86 e0       	ldi	r24, 0x06	; 6
 78e:	8c 83       	std	Y+4, r24	; 0x04
 790:	1a 83       	std	Y+2, r17	; 0x02
 792:	09 83       	std	Y+1, r16	; 0x01
 794:	8f ef       	ldi	r24, 0xFF	; 255
 796:	9f e7       	ldi	r25, 0x7F	; 127
 798:	9e 83       	std	Y+6, r25	; 0x06
 79a:	8d 83       	std	Y+5, r24	; 0x05
 79c:	ae 01       	movw	r20, r28
 79e:	47 5e       	subi	r20, 0xE7	; 231
 7a0:	5f 4f       	sbci	r21, 0xFF	; 255
 7a2:	6f 89       	ldd	r22, Y+23	; 0x17
 7a4:	78 8d       	ldd	r23, Y+24	; 0x18
 7a6:	ce 01       	movw	r24, r28
 7a8:	01 96       	adiw	r24, 0x01	; 1
 7aa:	08 d0       	rcall	.+16     	; 0x7bc <vfprintf>
 7ac:	ef 81       	ldd	r30, Y+7	; 0x07
 7ae:	f8 85       	ldd	r31, Y+8	; 0x08
 7b0:	e0 0f       	add	r30, r16
 7b2:	f1 1f       	adc	r31, r17
 7b4:	10 82       	st	Z, r1
 7b6:	2e 96       	adiw	r28, 0x0e	; 14
 7b8:	e4 e0       	ldi	r30, 0x04	; 4
 7ba:	93 c2       	rjmp	.+1318   	; 0xce2 <__epilogue_restores__+0x1c>

000007bc <vfprintf>:
 7bc:	ac e0       	ldi	r26, 0x0C	; 12
 7be:	b0 e0       	ldi	r27, 0x00	; 0
 7c0:	e3 ee       	ldi	r30, 0xE3	; 227
 7c2:	f3 e0       	ldi	r31, 0x03	; 3
 7c4:	64 c2       	rjmp	.+1224   	; 0xc8e <__prologue_saves__>
 7c6:	7c 01       	movw	r14, r24
 7c8:	6b 01       	movw	r12, r22
 7ca:	8a 01       	movw	r16, r20
 7cc:	fc 01       	movw	r30, r24
 7ce:	17 82       	std	Z+7, r1	; 0x07
 7d0:	16 82       	std	Z+6, r1	; 0x06
 7d2:	83 81       	ldd	r24, Z+3	; 0x03
 7d4:	81 ff       	sbrs	r24, 1
 7d6:	b0 c1       	rjmp	.+864    	; 0xb38 <vfprintf+0x37c>
 7d8:	ce 01       	movw	r24, r28
 7da:	01 96       	adiw	r24, 0x01	; 1
 7dc:	4c 01       	movw	r8, r24
 7de:	f7 01       	movw	r30, r14
 7e0:	93 81       	ldd	r25, Z+3	; 0x03
 7e2:	f6 01       	movw	r30, r12
 7e4:	93 fd       	sbrc	r25, 3
 7e6:	85 91       	lpm	r24, Z+
 7e8:	93 ff       	sbrs	r25, 3
 7ea:	81 91       	ld	r24, Z+
 7ec:	6f 01       	movw	r12, r30
 7ee:	88 23       	and	r24, r24
 7f0:	09 f4       	brne	.+2      	; 0x7f4 <vfprintf+0x38>
 7f2:	9e c1       	rjmp	.+828    	; 0xb30 <vfprintf+0x374>
 7f4:	85 32       	cpi	r24, 0x25	; 37
 7f6:	39 f4       	brne	.+14     	; 0x806 <vfprintf+0x4a>
 7f8:	93 fd       	sbrc	r25, 3
 7fa:	85 91       	lpm	r24, Z+
 7fc:	93 ff       	sbrs	r25, 3
 7fe:	81 91       	ld	r24, Z+
 800:	6f 01       	movw	r12, r30
 802:	85 32       	cpi	r24, 0x25	; 37
 804:	21 f4       	brne	.+8      	; 0x80e <vfprintf+0x52>
 806:	b7 01       	movw	r22, r14
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	b1 d1       	rcall	.+866    	; 0xb6e <fputc>
 80c:	e8 cf       	rjmp	.-48     	; 0x7de <vfprintf+0x22>
 80e:	51 2c       	mov	r5, r1
 810:	31 2c       	mov	r3, r1
 812:	20 e0       	ldi	r18, 0x00	; 0
 814:	20 32       	cpi	r18, 0x20	; 32
 816:	a0 f4       	brcc	.+40     	; 0x840 <vfprintf+0x84>
 818:	8b 32       	cpi	r24, 0x2B	; 43
 81a:	69 f0       	breq	.+26     	; 0x836 <vfprintf+0x7a>
 81c:	30 f4       	brcc	.+12     	; 0x82a <vfprintf+0x6e>
 81e:	80 32       	cpi	r24, 0x20	; 32
 820:	59 f0       	breq	.+22     	; 0x838 <vfprintf+0x7c>
 822:	83 32       	cpi	r24, 0x23	; 35
 824:	69 f4       	brne	.+26     	; 0x840 <vfprintf+0x84>
 826:	20 61       	ori	r18, 0x10	; 16
 828:	2c c0       	rjmp	.+88     	; 0x882 <vfprintf+0xc6>
 82a:	8d 32       	cpi	r24, 0x2D	; 45
 82c:	39 f0       	breq	.+14     	; 0x83c <vfprintf+0x80>
 82e:	80 33       	cpi	r24, 0x30	; 48
 830:	39 f4       	brne	.+14     	; 0x840 <vfprintf+0x84>
 832:	21 60       	ori	r18, 0x01	; 1
 834:	26 c0       	rjmp	.+76     	; 0x882 <vfprintf+0xc6>
 836:	22 60       	ori	r18, 0x02	; 2
 838:	24 60       	ori	r18, 0x04	; 4
 83a:	23 c0       	rjmp	.+70     	; 0x882 <vfprintf+0xc6>
 83c:	28 60       	ori	r18, 0x08	; 8
 83e:	21 c0       	rjmp	.+66     	; 0x882 <vfprintf+0xc6>
 840:	27 fd       	sbrc	r18, 7
 842:	27 c0       	rjmp	.+78     	; 0x892 <vfprintf+0xd6>
 844:	30 ed       	ldi	r19, 0xD0	; 208
 846:	38 0f       	add	r19, r24
 848:	3a 30       	cpi	r19, 0x0A	; 10
 84a:	78 f4       	brcc	.+30     	; 0x86a <vfprintf+0xae>
 84c:	26 ff       	sbrs	r18, 6
 84e:	06 c0       	rjmp	.+12     	; 0x85c <vfprintf+0xa0>
 850:	fa e0       	ldi	r31, 0x0A	; 10
 852:	5f 9e       	mul	r5, r31
 854:	30 0d       	add	r19, r0
 856:	11 24       	eor	r1, r1
 858:	53 2e       	mov	r5, r19
 85a:	13 c0       	rjmp	.+38     	; 0x882 <vfprintf+0xc6>
 85c:	8a e0       	ldi	r24, 0x0A	; 10
 85e:	38 9e       	mul	r3, r24
 860:	30 0d       	add	r19, r0
 862:	11 24       	eor	r1, r1
 864:	33 2e       	mov	r3, r19
 866:	20 62       	ori	r18, 0x20	; 32
 868:	0c c0       	rjmp	.+24     	; 0x882 <vfprintf+0xc6>
 86a:	8e 32       	cpi	r24, 0x2E	; 46
 86c:	21 f4       	brne	.+8      	; 0x876 <vfprintf+0xba>
 86e:	26 fd       	sbrc	r18, 6
 870:	5f c1       	rjmp	.+702    	; 0xb30 <vfprintf+0x374>
 872:	20 64       	ori	r18, 0x40	; 64
 874:	06 c0       	rjmp	.+12     	; 0x882 <vfprintf+0xc6>
 876:	8c 36       	cpi	r24, 0x6C	; 108
 878:	11 f4       	brne	.+4      	; 0x87e <vfprintf+0xc2>
 87a:	20 68       	ori	r18, 0x80	; 128
 87c:	02 c0       	rjmp	.+4      	; 0x882 <vfprintf+0xc6>
 87e:	88 36       	cpi	r24, 0x68	; 104
 880:	41 f4       	brne	.+16     	; 0x892 <vfprintf+0xd6>
 882:	f6 01       	movw	r30, r12
 884:	93 fd       	sbrc	r25, 3
 886:	85 91       	lpm	r24, Z+
 888:	93 ff       	sbrs	r25, 3
 88a:	81 91       	ld	r24, Z+
 88c:	6f 01       	movw	r12, r30
 88e:	81 11       	cpse	r24, r1
 890:	c1 cf       	rjmp	.-126    	; 0x814 <vfprintf+0x58>
 892:	98 2f       	mov	r25, r24
 894:	9f 7d       	andi	r25, 0xDF	; 223
 896:	95 54       	subi	r25, 0x45	; 69
 898:	93 30       	cpi	r25, 0x03	; 3
 89a:	28 f4       	brcc	.+10     	; 0x8a6 <vfprintf+0xea>
 89c:	0c 5f       	subi	r16, 0xFC	; 252
 89e:	1f 4f       	sbci	r17, 0xFF	; 255
 8a0:	ff e3       	ldi	r31, 0x3F	; 63
 8a2:	f9 83       	std	Y+1, r31	; 0x01
 8a4:	0d c0       	rjmp	.+26     	; 0x8c0 <vfprintf+0x104>
 8a6:	83 36       	cpi	r24, 0x63	; 99
 8a8:	31 f0       	breq	.+12     	; 0x8b6 <vfprintf+0xfa>
 8aa:	83 37       	cpi	r24, 0x73	; 115
 8ac:	71 f0       	breq	.+28     	; 0x8ca <vfprintf+0x10e>
 8ae:	83 35       	cpi	r24, 0x53	; 83
 8b0:	09 f0       	breq	.+2      	; 0x8b4 <vfprintf+0xf8>
 8b2:	57 c0       	rjmp	.+174    	; 0x962 <vfprintf+0x1a6>
 8b4:	21 c0       	rjmp	.+66     	; 0x8f8 <vfprintf+0x13c>
 8b6:	f8 01       	movw	r30, r16
 8b8:	80 81       	ld	r24, Z
 8ba:	89 83       	std	Y+1, r24	; 0x01
 8bc:	0e 5f       	subi	r16, 0xFE	; 254
 8be:	1f 4f       	sbci	r17, 0xFF	; 255
 8c0:	44 24       	eor	r4, r4
 8c2:	43 94       	inc	r4
 8c4:	51 2c       	mov	r5, r1
 8c6:	54 01       	movw	r10, r8
 8c8:	14 c0       	rjmp	.+40     	; 0x8f2 <vfprintf+0x136>
 8ca:	38 01       	movw	r6, r16
 8cc:	f2 e0       	ldi	r31, 0x02	; 2
 8ce:	6f 0e       	add	r6, r31
 8d0:	71 1c       	adc	r7, r1
 8d2:	f8 01       	movw	r30, r16
 8d4:	a0 80       	ld	r10, Z
 8d6:	b1 80       	ldd	r11, Z+1	; 0x01
 8d8:	26 ff       	sbrs	r18, 6
 8da:	03 c0       	rjmp	.+6      	; 0x8e2 <vfprintf+0x126>
 8dc:	65 2d       	mov	r22, r5
 8de:	70 e0       	ldi	r23, 0x00	; 0
 8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <vfprintf+0x12a>
 8e2:	6f ef       	ldi	r22, 0xFF	; 255
 8e4:	7f ef       	ldi	r23, 0xFF	; 255
 8e6:	c5 01       	movw	r24, r10
 8e8:	2c 87       	std	Y+12, r18	; 0x0c
 8ea:	36 d1       	rcall	.+620    	; 0xb58 <strnlen>
 8ec:	2c 01       	movw	r4, r24
 8ee:	83 01       	movw	r16, r6
 8f0:	2c 85       	ldd	r18, Y+12	; 0x0c
 8f2:	2f 77       	andi	r18, 0x7F	; 127
 8f4:	22 2e       	mov	r2, r18
 8f6:	16 c0       	rjmp	.+44     	; 0x924 <vfprintf+0x168>
 8f8:	38 01       	movw	r6, r16
 8fa:	f2 e0       	ldi	r31, 0x02	; 2
 8fc:	6f 0e       	add	r6, r31
 8fe:	71 1c       	adc	r7, r1
 900:	f8 01       	movw	r30, r16
 902:	a0 80       	ld	r10, Z
 904:	b1 80       	ldd	r11, Z+1	; 0x01
 906:	26 ff       	sbrs	r18, 6
 908:	03 c0       	rjmp	.+6      	; 0x910 <vfprintf+0x154>
 90a:	65 2d       	mov	r22, r5
 90c:	70 e0       	ldi	r23, 0x00	; 0
 90e:	02 c0       	rjmp	.+4      	; 0x914 <vfprintf+0x158>
 910:	6f ef       	ldi	r22, 0xFF	; 255
 912:	7f ef       	ldi	r23, 0xFF	; 255
 914:	c5 01       	movw	r24, r10
 916:	2c 87       	std	Y+12, r18	; 0x0c
 918:	14 d1       	rcall	.+552    	; 0xb42 <strnlen_P>
 91a:	2c 01       	movw	r4, r24
 91c:	2c 85       	ldd	r18, Y+12	; 0x0c
 91e:	20 68       	ori	r18, 0x80	; 128
 920:	22 2e       	mov	r2, r18
 922:	83 01       	movw	r16, r6
 924:	23 fc       	sbrc	r2, 3
 926:	19 c0       	rjmp	.+50     	; 0x95a <vfprintf+0x19e>
 928:	83 2d       	mov	r24, r3
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	48 16       	cp	r4, r24
 92e:	59 06       	cpc	r5, r25
 930:	a0 f4       	brcc	.+40     	; 0x95a <vfprintf+0x19e>
 932:	b7 01       	movw	r22, r14
 934:	80 e2       	ldi	r24, 0x20	; 32
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	1a d1       	rcall	.+564    	; 0xb6e <fputc>
 93a:	3a 94       	dec	r3
 93c:	f5 cf       	rjmp	.-22     	; 0x928 <vfprintf+0x16c>
 93e:	f5 01       	movw	r30, r10
 940:	27 fc       	sbrc	r2, 7
 942:	85 91       	lpm	r24, Z+
 944:	27 fe       	sbrs	r2, 7
 946:	81 91       	ld	r24, Z+
 948:	5f 01       	movw	r10, r30
 94a:	b7 01       	movw	r22, r14
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	0f d1       	rcall	.+542    	; 0xb6e <fputc>
 950:	31 10       	cpse	r3, r1
 952:	3a 94       	dec	r3
 954:	f1 e0       	ldi	r31, 0x01	; 1
 956:	4f 1a       	sub	r4, r31
 958:	51 08       	sbc	r5, r1
 95a:	41 14       	cp	r4, r1
 95c:	51 04       	cpc	r5, r1
 95e:	79 f7       	brne	.-34     	; 0x93e <vfprintf+0x182>
 960:	de c0       	rjmp	.+444    	; 0xb1e <vfprintf+0x362>
 962:	84 36       	cpi	r24, 0x64	; 100
 964:	11 f0       	breq	.+4      	; 0x96a <vfprintf+0x1ae>
 966:	89 36       	cpi	r24, 0x69	; 105
 968:	31 f5       	brne	.+76     	; 0x9b6 <vfprintf+0x1fa>
 96a:	f8 01       	movw	r30, r16
 96c:	27 ff       	sbrs	r18, 7
 96e:	07 c0       	rjmp	.+14     	; 0x97e <vfprintf+0x1c2>
 970:	60 81       	ld	r22, Z
 972:	71 81       	ldd	r23, Z+1	; 0x01
 974:	82 81       	ldd	r24, Z+2	; 0x02
 976:	93 81       	ldd	r25, Z+3	; 0x03
 978:	0c 5f       	subi	r16, 0xFC	; 252
 97a:	1f 4f       	sbci	r17, 0xFF	; 255
 97c:	08 c0       	rjmp	.+16     	; 0x98e <vfprintf+0x1d2>
 97e:	60 81       	ld	r22, Z
 980:	71 81       	ldd	r23, Z+1	; 0x01
 982:	88 27       	eor	r24, r24
 984:	77 fd       	sbrc	r23, 7
 986:	80 95       	com	r24
 988:	98 2f       	mov	r25, r24
 98a:	0e 5f       	subi	r16, 0xFE	; 254
 98c:	1f 4f       	sbci	r17, 0xFF	; 255
 98e:	2f 76       	andi	r18, 0x6F	; 111
 990:	b2 2e       	mov	r11, r18
 992:	97 ff       	sbrs	r25, 7
 994:	09 c0       	rjmp	.+18     	; 0x9a8 <vfprintf+0x1ec>
 996:	90 95       	com	r25
 998:	80 95       	com	r24
 99a:	70 95       	com	r23
 99c:	61 95       	neg	r22
 99e:	7f 4f       	sbci	r23, 0xFF	; 255
 9a0:	8f 4f       	sbci	r24, 0xFF	; 255
 9a2:	9f 4f       	sbci	r25, 0xFF	; 255
 9a4:	20 68       	ori	r18, 0x80	; 128
 9a6:	b2 2e       	mov	r11, r18
 9a8:	2a e0       	ldi	r18, 0x0A	; 10
 9aa:	30 e0       	ldi	r19, 0x00	; 0
 9ac:	a4 01       	movw	r20, r8
 9ae:	11 d1       	rcall	.+546    	; 0xbd2 <__ultoa_invert>
 9b0:	a8 2e       	mov	r10, r24
 9b2:	a8 18       	sub	r10, r8
 9b4:	43 c0       	rjmp	.+134    	; 0xa3c <vfprintf+0x280>
 9b6:	85 37       	cpi	r24, 0x75	; 117
 9b8:	29 f4       	brne	.+10     	; 0x9c4 <vfprintf+0x208>
 9ba:	2f 7e       	andi	r18, 0xEF	; 239
 9bc:	b2 2e       	mov	r11, r18
 9be:	2a e0       	ldi	r18, 0x0A	; 10
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	25 c0       	rjmp	.+74     	; 0xa0e <vfprintf+0x252>
 9c4:	f2 2f       	mov	r31, r18
 9c6:	f9 7f       	andi	r31, 0xF9	; 249
 9c8:	bf 2e       	mov	r11, r31
 9ca:	8f 36       	cpi	r24, 0x6F	; 111
 9cc:	c1 f0       	breq	.+48     	; 0x9fe <vfprintf+0x242>
 9ce:	18 f4       	brcc	.+6      	; 0x9d6 <vfprintf+0x21a>
 9d0:	88 35       	cpi	r24, 0x58	; 88
 9d2:	79 f0       	breq	.+30     	; 0x9f2 <vfprintf+0x236>
 9d4:	ad c0       	rjmp	.+346    	; 0xb30 <vfprintf+0x374>
 9d6:	80 37       	cpi	r24, 0x70	; 112
 9d8:	19 f0       	breq	.+6      	; 0x9e0 <vfprintf+0x224>
 9da:	88 37       	cpi	r24, 0x78	; 120
 9dc:	21 f0       	breq	.+8      	; 0x9e6 <vfprintf+0x22a>
 9de:	a8 c0       	rjmp	.+336    	; 0xb30 <vfprintf+0x374>
 9e0:	2f 2f       	mov	r18, r31
 9e2:	20 61       	ori	r18, 0x10	; 16
 9e4:	b2 2e       	mov	r11, r18
 9e6:	b4 fe       	sbrs	r11, 4
 9e8:	0d c0       	rjmp	.+26     	; 0xa04 <vfprintf+0x248>
 9ea:	8b 2d       	mov	r24, r11
 9ec:	84 60       	ori	r24, 0x04	; 4
 9ee:	b8 2e       	mov	r11, r24
 9f0:	09 c0       	rjmp	.+18     	; 0xa04 <vfprintf+0x248>
 9f2:	24 ff       	sbrs	r18, 4
 9f4:	0a c0       	rjmp	.+20     	; 0xa0a <vfprintf+0x24e>
 9f6:	9f 2f       	mov	r25, r31
 9f8:	96 60       	ori	r25, 0x06	; 6
 9fa:	b9 2e       	mov	r11, r25
 9fc:	06 c0       	rjmp	.+12     	; 0xa0a <vfprintf+0x24e>
 9fe:	28 e0       	ldi	r18, 0x08	; 8
 a00:	30 e0       	ldi	r19, 0x00	; 0
 a02:	05 c0       	rjmp	.+10     	; 0xa0e <vfprintf+0x252>
 a04:	20 e1       	ldi	r18, 0x10	; 16
 a06:	30 e0       	ldi	r19, 0x00	; 0
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <vfprintf+0x252>
 a0a:	20 e1       	ldi	r18, 0x10	; 16
 a0c:	32 e0       	ldi	r19, 0x02	; 2
 a0e:	f8 01       	movw	r30, r16
 a10:	b7 fe       	sbrs	r11, 7
 a12:	07 c0       	rjmp	.+14     	; 0xa22 <vfprintf+0x266>
 a14:	60 81       	ld	r22, Z
 a16:	71 81       	ldd	r23, Z+1	; 0x01
 a18:	82 81       	ldd	r24, Z+2	; 0x02
 a1a:	93 81       	ldd	r25, Z+3	; 0x03
 a1c:	0c 5f       	subi	r16, 0xFC	; 252
 a1e:	1f 4f       	sbci	r17, 0xFF	; 255
 a20:	06 c0       	rjmp	.+12     	; 0xa2e <vfprintf+0x272>
 a22:	60 81       	ld	r22, Z
 a24:	71 81       	ldd	r23, Z+1	; 0x01
 a26:	80 e0       	ldi	r24, 0x00	; 0
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	0e 5f       	subi	r16, 0xFE	; 254
 a2c:	1f 4f       	sbci	r17, 0xFF	; 255
 a2e:	a4 01       	movw	r20, r8
 a30:	d0 d0       	rcall	.+416    	; 0xbd2 <__ultoa_invert>
 a32:	a8 2e       	mov	r10, r24
 a34:	a8 18       	sub	r10, r8
 a36:	fb 2d       	mov	r31, r11
 a38:	ff 77       	andi	r31, 0x7F	; 127
 a3a:	bf 2e       	mov	r11, r31
 a3c:	b6 fe       	sbrs	r11, 6
 a3e:	0b c0       	rjmp	.+22     	; 0xa56 <vfprintf+0x29a>
 a40:	2b 2d       	mov	r18, r11
 a42:	2e 7f       	andi	r18, 0xFE	; 254
 a44:	a5 14       	cp	r10, r5
 a46:	50 f4       	brcc	.+20     	; 0xa5c <vfprintf+0x2a0>
 a48:	b4 fe       	sbrs	r11, 4
 a4a:	0a c0       	rjmp	.+20     	; 0xa60 <vfprintf+0x2a4>
 a4c:	b2 fc       	sbrc	r11, 2
 a4e:	08 c0       	rjmp	.+16     	; 0xa60 <vfprintf+0x2a4>
 a50:	2b 2d       	mov	r18, r11
 a52:	2e 7e       	andi	r18, 0xEE	; 238
 a54:	05 c0       	rjmp	.+10     	; 0xa60 <vfprintf+0x2a4>
 a56:	7a 2c       	mov	r7, r10
 a58:	2b 2d       	mov	r18, r11
 a5a:	03 c0       	rjmp	.+6      	; 0xa62 <vfprintf+0x2a6>
 a5c:	7a 2c       	mov	r7, r10
 a5e:	01 c0       	rjmp	.+2      	; 0xa62 <vfprintf+0x2a6>
 a60:	75 2c       	mov	r7, r5
 a62:	24 ff       	sbrs	r18, 4
 a64:	0d c0       	rjmp	.+26     	; 0xa80 <vfprintf+0x2c4>
 a66:	fe 01       	movw	r30, r28
 a68:	ea 0d       	add	r30, r10
 a6a:	f1 1d       	adc	r31, r1
 a6c:	80 81       	ld	r24, Z
 a6e:	80 33       	cpi	r24, 0x30	; 48
 a70:	11 f4       	brne	.+4      	; 0xa76 <vfprintf+0x2ba>
 a72:	29 7e       	andi	r18, 0xE9	; 233
 a74:	09 c0       	rjmp	.+18     	; 0xa88 <vfprintf+0x2cc>
 a76:	22 ff       	sbrs	r18, 2
 a78:	06 c0       	rjmp	.+12     	; 0xa86 <vfprintf+0x2ca>
 a7a:	73 94       	inc	r7
 a7c:	73 94       	inc	r7
 a7e:	04 c0       	rjmp	.+8      	; 0xa88 <vfprintf+0x2cc>
 a80:	82 2f       	mov	r24, r18
 a82:	86 78       	andi	r24, 0x86	; 134
 a84:	09 f0       	breq	.+2      	; 0xa88 <vfprintf+0x2cc>
 a86:	73 94       	inc	r7
 a88:	23 fd       	sbrc	r18, 3
 a8a:	12 c0       	rjmp	.+36     	; 0xab0 <vfprintf+0x2f4>
 a8c:	20 ff       	sbrs	r18, 0
 a8e:	06 c0       	rjmp	.+12     	; 0xa9c <vfprintf+0x2e0>
 a90:	5a 2c       	mov	r5, r10
 a92:	73 14       	cp	r7, r3
 a94:	18 f4       	brcc	.+6      	; 0xa9c <vfprintf+0x2e0>
 a96:	53 0c       	add	r5, r3
 a98:	57 18       	sub	r5, r7
 a9a:	73 2c       	mov	r7, r3
 a9c:	73 14       	cp	r7, r3
 a9e:	60 f4       	brcc	.+24     	; 0xab8 <vfprintf+0x2fc>
 aa0:	b7 01       	movw	r22, r14
 aa2:	80 e2       	ldi	r24, 0x20	; 32
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	2c 87       	std	Y+12, r18	; 0x0c
 aa8:	62 d0       	rcall	.+196    	; 0xb6e <fputc>
 aaa:	73 94       	inc	r7
 aac:	2c 85       	ldd	r18, Y+12	; 0x0c
 aae:	f6 cf       	rjmp	.-20     	; 0xa9c <vfprintf+0x2e0>
 ab0:	73 14       	cp	r7, r3
 ab2:	10 f4       	brcc	.+4      	; 0xab8 <vfprintf+0x2fc>
 ab4:	37 18       	sub	r3, r7
 ab6:	01 c0       	rjmp	.+2      	; 0xaba <vfprintf+0x2fe>
 ab8:	31 2c       	mov	r3, r1
 aba:	24 ff       	sbrs	r18, 4
 abc:	11 c0       	rjmp	.+34     	; 0xae0 <vfprintf+0x324>
 abe:	b7 01       	movw	r22, r14
 ac0:	80 e3       	ldi	r24, 0x30	; 48
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	2c 87       	std	Y+12, r18	; 0x0c
 ac6:	53 d0       	rcall	.+166    	; 0xb6e <fputc>
 ac8:	2c 85       	ldd	r18, Y+12	; 0x0c
 aca:	22 ff       	sbrs	r18, 2
 acc:	16 c0       	rjmp	.+44     	; 0xafa <vfprintf+0x33e>
 ace:	21 ff       	sbrs	r18, 1
 ad0:	03 c0       	rjmp	.+6      	; 0xad8 <vfprintf+0x31c>
 ad2:	88 e5       	ldi	r24, 0x58	; 88
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	02 c0       	rjmp	.+4      	; 0xadc <vfprintf+0x320>
 ad8:	88 e7       	ldi	r24, 0x78	; 120
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	b7 01       	movw	r22, r14
 ade:	0c c0       	rjmp	.+24     	; 0xaf8 <vfprintf+0x33c>
 ae0:	82 2f       	mov	r24, r18
 ae2:	86 78       	andi	r24, 0x86	; 134
 ae4:	51 f0       	breq	.+20     	; 0xafa <vfprintf+0x33e>
 ae6:	21 fd       	sbrc	r18, 1
 ae8:	02 c0       	rjmp	.+4      	; 0xaee <vfprintf+0x332>
 aea:	80 e2       	ldi	r24, 0x20	; 32
 aec:	01 c0       	rjmp	.+2      	; 0xaf0 <vfprintf+0x334>
 aee:	8b e2       	ldi	r24, 0x2B	; 43
 af0:	27 fd       	sbrc	r18, 7
 af2:	8d e2       	ldi	r24, 0x2D	; 45
 af4:	b7 01       	movw	r22, r14
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	3a d0       	rcall	.+116    	; 0xb6e <fputc>
 afa:	a5 14       	cp	r10, r5
 afc:	30 f4       	brcc	.+12     	; 0xb0a <vfprintf+0x34e>
 afe:	b7 01       	movw	r22, r14
 b00:	80 e3       	ldi	r24, 0x30	; 48
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	34 d0       	rcall	.+104    	; 0xb6e <fputc>
 b06:	5a 94       	dec	r5
 b08:	f8 cf       	rjmp	.-16     	; 0xafa <vfprintf+0x33e>
 b0a:	aa 94       	dec	r10
 b0c:	f4 01       	movw	r30, r8
 b0e:	ea 0d       	add	r30, r10
 b10:	f1 1d       	adc	r31, r1
 b12:	80 81       	ld	r24, Z
 b14:	b7 01       	movw	r22, r14
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	2a d0       	rcall	.+84     	; 0xb6e <fputc>
 b1a:	a1 10       	cpse	r10, r1
 b1c:	f6 cf       	rjmp	.-20     	; 0xb0a <vfprintf+0x34e>
 b1e:	33 20       	and	r3, r3
 b20:	09 f4       	brne	.+2      	; 0xb24 <vfprintf+0x368>
 b22:	5d ce       	rjmp	.-838    	; 0x7de <vfprintf+0x22>
 b24:	b7 01       	movw	r22, r14
 b26:	80 e2       	ldi	r24, 0x20	; 32
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	21 d0       	rcall	.+66     	; 0xb6e <fputc>
 b2c:	3a 94       	dec	r3
 b2e:	f7 cf       	rjmp	.-18     	; 0xb1e <vfprintf+0x362>
 b30:	f7 01       	movw	r30, r14
 b32:	86 81       	ldd	r24, Z+6	; 0x06
 b34:	97 81       	ldd	r25, Z+7	; 0x07
 b36:	02 c0       	rjmp	.+4      	; 0xb3c <vfprintf+0x380>
 b38:	8f ef       	ldi	r24, 0xFF	; 255
 b3a:	9f ef       	ldi	r25, 0xFF	; 255
 b3c:	2c 96       	adiw	r28, 0x0c	; 12
 b3e:	e2 e1       	ldi	r30, 0x12	; 18
 b40:	c2 c0       	rjmp	.+388    	; 0xcc6 <__epilogue_restores__>

00000b42 <strnlen_P>:
 b42:	fc 01       	movw	r30, r24
 b44:	05 90       	lpm	r0, Z+
 b46:	61 50       	subi	r22, 0x01	; 1
 b48:	70 40       	sbci	r23, 0x00	; 0
 b4a:	01 10       	cpse	r0, r1
 b4c:	d8 f7       	brcc	.-10     	; 0xb44 <strnlen_P+0x2>
 b4e:	80 95       	com	r24
 b50:	90 95       	com	r25
 b52:	8e 0f       	add	r24, r30
 b54:	9f 1f       	adc	r25, r31
 b56:	08 95       	ret

00000b58 <strnlen>:
 b58:	fc 01       	movw	r30, r24
 b5a:	61 50       	subi	r22, 0x01	; 1
 b5c:	70 40       	sbci	r23, 0x00	; 0
 b5e:	01 90       	ld	r0, Z+
 b60:	01 10       	cpse	r0, r1
 b62:	d8 f7       	brcc	.-10     	; 0xb5a <strnlen+0x2>
 b64:	80 95       	com	r24
 b66:	90 95       	com	r25
 b68:	8e 0f       	add	r24, r30
 b6a:	9f 1f       	adc	r25, r31
 b6c:	08 95       	ret

00000b6e <fputc>:
 b6e:	0f 93       	push	r16
 b70:	1f 93       	push	r17
 b72:	cf 93       	push	r28
 b74:	df 93       	push	r29
 b76:	18 2f       	mov	r17, r24
 b78:	09 2f       	mov	r16, r25
 b7a:	eb 01       	movw	r28, r22
 b7c:	8b 81       	ldd	r24, Y+3	; 0x03
 b7e:	81 fd       	sbrc	r24, 1
 b80:	03 c0       	rjmp	.+6      	; 0xb88 <fputc+0x1a>
 b82:	8f ef       	ldi	r24, 0xFF	; 255
 b84:	9f ef       	ldi	r25, 0xFF	; 255
 b86:	20 c0       	rjmp	.+64     	; 0xbc8 <fputc+0x5a>
 b88:	82 ff       	sbrs	r24, 2
 b8a:	10 c0       	rjmp	.+32     	; 0xbac <fputc+0x3e>
 b8c:	4e 81       	ldd	r20, Y+6	; 0x06
 b8e:	5f 81       	ldd	r21, Y+7	; 0x07
 b90:	2c 81       	ldd	r18, Y+4	; 0x04
 b92:	3d 81       	ldd	r19, Y+5	; 0x05
 b94:	42 17       	cp	r20, r18
 b96:	53 07       	cpc	r21, r19
 b98:	7c f4       	brge	.+30     	; 0xbb8 <fputc+0x4a>
 b9a:	e8 81       	ld	r30, Y
 b9c:	f9 81       	ldd	r31, Y+1	; 0x01
 b9e:	9f 01       	movw	r18, r30
 ba0:	2f 5f       	subi	r18, 0xFF	; 255
 ba2:	3f 4f       	sbci	r19, 0xFF	; 255
 ba4:	39 83       	std	Y+1, r19	; 0x01
 ba6:	28 83       	st	Y, r18
 ba8:	10 83       	st	Z, r17
 baa:	06 c0       	rjmp	.+12     	; 0xbb8 <fputc+0x4a>
 bac:	e8 85       	ldd	r30, Y+8	; 0x08
 bae:	f9 85       	ldd	r31, Y+9	; 0x09
 bb0:	81 2f       	mov	r24, r17
 bb2:	09 95       	icall
 bb4:	89 2b       	or	r24, r25
 bb6:	29 f7       	brne	.-54     	; 0xb82 <fputc+0x14>
 bb8:	2e 81       	ldd	r18, Y+6	; 0x06
 bba:	3f 81       	ldd	r19, Y+7	; 0x07
 bbc:	2f 5f       	subi	r18, 0xFF	; 255
 bbe:	3f 4f       	sbci	r19, 0xFF	; 255
 bc0:	3f 83       	std	Y+7, r19	; 0x07
 bc2:	2e 83       	std	Y+6, r18	; 0x06
 bc4:	81 2f       	mov	r24, r17
 bc6:	90 2f       	mov	r25, r16
 bc8:	df 91       	pop	r29
 bca:	cf 91       	pop	r28
 bcc:	1f 91       	pop	r17
 bce:	0f 91       	pop	r16
 bd0:	08 95       	ret

00000bd2 <__ultoa_invert>:
 bd2:	fa 01       	movw	r30, r20
 bd4:	aa 27       	eor	r26, r26
 bd6:	28 30       	cpi	r18, 0x08	; 8
 bd8:	51 f1       	breq	.+84     	; 0xc2e <__ultoa_invert+0x5c>
 bda:	20 31       	cpi	r18, 0x10	; 16
 bdc:	81 f1       	breq	.+96     	; 0xc3e <__ultoa_invert+0x6c>
 bde:	e8 94       	clt
 be0:	6f 93       	push	r22
 be2:	6e 7f       	andi	r22, 0xFE	; 254
 be4:	6e 5f       	subi	r22, 0xFE	; 254
 be6:	7f 4f       	sbci	r23, 0xFF	; 255
 be8:	8f 4f       	sbci	r24, 0xFF	; 255
 bea:	9f 4f       	sbci	r25, 0xFF	; 255
 bec:	af 4f       	sbci	r26, 0xFF	; 255
 bee:	b1 e0       	ldi	r27, 0x01	; 1
 bf0:	3e d0       	rcall	.+124    	; 0xc6e <__ultoa_invert+0x9c>
 bf2:	b4 e0       	ldi	r27, 0x04	; 4
 bf4:	3c d0       	rcall	.+120    	; 0xc6e <__ultoa_invert+0x9c>
 bf6:	67 0f       	add	r22, r23
 bf8:	78 1f       	adc	r23, r24
 bfa:	89 1f       	adc	r24, r25
 bfc:	9a 1f       	adc	r25, r26
 bfe:	a1 1d       	adc	r26, r1
 c00:	68 0f       	add	r22, r24
 c02:	79 1f       	adc	r23, r25
 c04:	8a 1f       	adc	r24, r26
 c06:	91 1d       	adc	r25, r1
 c08:	a1 1d       	adc	r26, r1
 c0a:	6a 0f       	add	r22, r26
 c0c:	71 1d       	adc	r23, r1
 c0e:	81 1d       	adc	r24, r1
 c10:	91 1d       	adc	r25, r1
 c12:	a1 1d       	adc	r26, r1
 c14:	20 d0       	rcall	.+64     	; 0xc56 <__ultoa_invert+0x84>
 c16:	09 f4       	brne	.+2      	; 0xc1a <__ultoa_invert+0x48>
 c18:	68 94       	set
 c1a:	3f 91       	pop	r19
 c1c:	2a e0       	ldi	r18, 0x0A	; 10
 c1e:	26 9f       	mul	r18, r22
 c20:	11 24       	eor	r1, r1
 c22:	30 19       	sub	r19, r0
 c24:	30 5d       	subi	r19, 0xD0	; 208
 c26:	31 93       	st	Z+, r19
 c28:	de f6       	brtc	.-74     	; 0xbe0 <__ultoa_invert+0xe>
 c2a:	cf 01       	movw	r24, r30
 c2c:	08 95       	ret
 c2e:	46 2f       	mov	r20, r22
 c30:	47 70       	andi	r20, 0x07	; 7
 c32:	40 5d       	subi	r20, 0xD0	; 208
 c34:	41 93       	st	Z+, r20
 c36:	b3 e0       	ldi	r27, 0x03	; 3
 c38:	0f d0       	rcall	.+30     	; 0xc58 <__ultoa_invert+0x86>
 c3a:	c9 f7       	brne	.-14     	; 0xc2e <__ultoa_invert+0x5c>
 c3c:	f6 cf       	rjmp	.-20     	; 0xc2a <__ultoa_invert+0x58>
 c3e:	46 2f       	mov	r20, r22
 c40:	4f 70       	andi	r20, 0x0F	; 15
 c42:	40 5d       	subi	r20, 0xD0	; 208
 c44:	4a 33       	cpi	r20, 0x3A	; 58
 c46:	18 f0       	brcs	.+6      	; 0xc4e <__ultoa_invert+0x7c>
 c48:	49 5d       	subi	r20, 0xD9	; 217
 c4a:	31 fd       	sbrc	r19, 1
 c4c:	40 52       	subi	r20, 0x20	; 32
 c4e:	41 93       	st	Z+, r20
 c50:	02 d0       	rcall	.+4      	; 0xc56 <__ultoa_invert+0x84>
 c52:	a9 f7       	brne	.-22     	; 0xc3e <__ultoa_invert+0x6c>
 c54:	ea cf       	rjmp	.-44     	; 0xc2a <__ultoa_invert+0x58>
 c56:	b4 e0       	ldi	r27, 0x04	; 4
 c58:	a6 95       	lsr	r26
 c5a:	97 95       	ror	r25
 c5c:	87 95       	ror	r24
 c5e:	77 95       	ror	r23
 c60:	67 95       	ror	r22
 c62:	ba 95       	dec	r27
 c64:	c9 f7       	brne	.-14     	; 0xc58 <__ultoa_invert+0x86>
 c66:	00 97       	sbiw	r24, 0x00	; 0
 c68:	61 05       	cpc	r22, r1
 c6a:	71 05       	cpc	r23, r1
 c6c:	08 95       	ret
 c6e:	9b 01       	movw	r18, r22
 c70:	ac 01       	movw	r20, r24
 c72:	0a 2e       	mov	r0, r26
 c74:	06 94       	lsr	r0
 c76:	57 95       	ror	r21
 c78:	47 95       	ror	r20
 c7a:	37 95       	ror	r19
 c7c:	27 95       	ror	r18
 c7e:	ba 95       	dec	r27
 c80:	c9 f7       	brne	.-14     	; 0xc74 <__ultoa_invert+0xa2>
 c82:	62 0f       	add	r22, r18
 c84:	73 1f       	adc	r23, r19
 c86:	84 1f       	adc	r24, r20
 c88:	95 1f       	adc	r25, r21
 c8a:	a0 1d       	adc	r26, r0
 c8c:	08 95       	ret

00000c8e <__prologue_saves__>:
 c8e:	2f 92       	push	r2
 c90:	3f 92       	push	r3
 c92:	4f 92       	push	r4
 c94:	5f 92       	push	r5
 c96:	6f 92       	push	r6
 c98:	7f 92       	push	r7
 c9a:	8f 92       	push	r8
 c9c:	9f 92       	push	r9
 c9e:	af 92       	push	r10
 ca0:	bf 92       	push	r11
 ca2:	cf 92       	push	r12
 ca4:	df 92       	push	r13
 ca6:	ef 92       	push	r14
 ca8:	ff 92       	push	r15
 caa:	0f 93       	push	r16
 cac:	1f 93       	push	r17
 cae:	cf 93       	push	r28
 cb0:	df 93       	push	r29
 cb2:	cd b7       	in	r28, 0x3d	; 61
 cb4:	de b7       	in	r29, 0x3e	; 62
 cb6:	ca 1b       	sub	r28, r26
 cb8:	db 0b       	sbc	r29, r27
 cba:	0f b6       	in	r0, 0x3f	; 63
 cbc:	f8 94       	cli
 cbe:	de bf       	out	0x3e, r29	; 62
 cc0:	0f be       	out	0x3f, r0	; 63
 cc2:	cd bf       	out	0x3d, r28	; 61
 cc4:	09 94       	ijmp

00000cc6 <__epilogue_restores__>:
 cc6:	2a 88       	ldd	r2, Y+18	; 0x12
 cc8:	39 88       	ldd	r3, Y+17	; 0x11
 cca:	48 88       	ldd	r4, Y+16	; 0x10
 ccc:	5f 84       	ldd	r5, Y+15	; 0x0f
 cce:	6e 84       	ldd	r6, Y+14	; 0x0e
 cd0:	7d 84       	ldd	r7, Y+13	; 0x0d
 cd2:	8c 84       	ldd	r8, Y+12	; 0x0c
 cd4:	9b 84       	ldd	r9, Y+11	; 0x0b
 cd6:	aa 84       	ldd	r10, Y+10	; 0x0a
 cd8:	b9 84       	ldd	r11, Y+9	; 0x09
 cda:	c8 84       	ldd	r12, Y+8	; 0x08
 cdc:	df 80       	ldd	r13, Y+7	; 0x07
 cde:	ee 80       	ldd	r14, Y+6	; 0x06
 ce0:	fd 80       	ldd	r15, Y+5	; 0x05
 ce2:	0c 81       	ldd	r16, Y+4	; 0x04
 ce4:	1b 81       	ldd	r17, Y+3	; 0x03
 ce6:	aa 81       	ldd	r26, Y+2	; 0x02
 ce8:	b9 81       	ldd	r27, Y+1	; 0x01
 cea:	ce 0f       	add	r28, r30
 cec:	d1 1d       	adc	r29, r1
 cee:	0f b6       	in	r0, 0x3f	; 63
 cf0:	f8 94       	cli
 cf2:	de bf       	out	0x3e, r29	; 62
 cf4:	0f be       	out	0x3f, r0	; 63
 cf6:	cd bf       	out	0x3d, r28	; 61
 cf8:	ed 01       	movw	r28, r26
 cfa:	08 95       	ret

00000cfc <_exit>:
 cfc:	f8 94       	cli

00000cfe <__stop_program>:
 cfe:	ff cf       	rjmp	.-2      	; 0xcfe <__stop_program>
