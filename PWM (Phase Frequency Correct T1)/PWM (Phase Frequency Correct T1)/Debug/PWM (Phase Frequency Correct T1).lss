
PWM (Phase Frequency Correct T1).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000084  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000000f8  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000db  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000093  00000000  00000000  00000223  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000d0  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ae  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  0000055a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	1d c0       	rjmp	.+58     	; 0x80 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
int flag;

static void PWM1AB_Init(void)
{
	/* Phase & Freq Correct PWM Mode using ICR1 in Timer1 */
	TCCR1A |= (0<<WGM11)|(0<<WGM10)|(1<<COM1A1)|(1<<COM1B1);
  48:	8f b5       	in	r24, 0x2f	; 47
  4a:	80 6a       	ori	r24, 0xA0	; 160
  4c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM13)|(0<<WGM12)|(1<<CS10);
  4e:	8e b5       	in	r24, 0x2e	; 46
  50:	81 61       	ori	r24, 0x11	; 17
  52:	8e bd       	out	0x2e, r24	; 46
	
	/* Here, the Compare Reg is ICR1 */
	ICR1 = 0xFFFF;
  54:	8f ef       	ldi	r24, 0xFF	; 255
  56:	9f ef       	ldi	r25, 0xFF	; 255
  58:	97 bd       	out	0x27, r25	; 39
  5a:	86 bd       	out	0x26, r24	; 38
	DDRB |= (1<<PB1)|(1<<PB2);
  5c:	87 b3       	in	r24, 0x17	; 23
  5e:	86 60       	ori	r24, 0x06	; 6
  60:	87 bb       	out	0x17, r24	; 23
	
	flag = 1;
  62:	81 e0       	ldi	r24, 0x01	; 1
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	90 93 61 00 	sts	0x0061, r25
  6a:	80 93 60 00 	sts	0x0060, r24
	if(flag)
	{
		PWM1A_DutyCycle = 0x3FFF;
		PWM1B_DutyCycle = 0x5FFF;
		
		OCR1A = PWM1A_DutyCycle;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	9f e3       	ldi	r25, 0x3F	; 63
  72:	9b bd       	out	0x2b, r25	; 43
  74:	8a bd       	out	0x2a, r24	; 42
		OCR1B = PWM1B_DutyCycle;
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	9f e5       	ldi	r25, 0x5F	; 95
  7a:	99 bd       	out	0x29, r25	; 41
  7c:	88 bd       	out	0x28, r24	; 40
  7e:	ff cf       	rjmp	.-2      	; 0x7e <main+0x36>

00000080 <_exit>:
  80:	f8 94       	cli

00000082 <__stop_program>:
  82:	ff cf       	rjmp	.-2      	; 0x82 <__stop_program>
